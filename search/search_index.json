{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>CIMTool is an open source tool for working with the Common Information Model (CIM) to produce design artifacts such as database schemas, message exchange syntax, source code classes, and reference documentation. CIM is a UML model used in the electric power generation, transmission, and distribution domains.</p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>CIMTool allows users to:</p> <ul> <li>Create Contextual Profiles from the CIM Unified Model Language (UML)</li> <li>Generate schemas such as Resource Description Framework Schema (RDF Schema) from a Contextual Profile</li> <li>Create their own custom builders and import them into CIMTool to generate alternate types of target output (e.g. Word docs, SQL DB scripts, Apache Avro schemas, source code such as Java, C#, Python, etc).  See the CIMTool Builders Library for detailed instructions on how to create your own builder.</li> <li>Validate Contextual Profile schemas</li> <li>Validate data instances against a Contextual Profile schema</li> <li>Validate incremental data instances against an instance and a Contextual Profile schema</li> <li>Import Contextual Profiles from a spreadsheet</li> </ul>"},{"location":"#questions-and-discussion","title":"Questions and Discussion","text":"<p>The CIMTool community has a Discussion board on GitHub which you can use to ask questions, get help, and engage with the rest of the community.</p>"},{"location":"core-concepts/","title":"Core Concepts","text":"<p>Before using CIMTool it is helpful to understand some vocabulary so that you can more easily navigate this documentation.</p> <p>Tip</p> <p>If you're brand new to the Common Information Model (CIM), a great starting point is EPRI's CIM Primer.</p> <p>The CIM is an information model copyrighted by the UCAIug (i.e. CIM Users Group) and licensed under the Apache 2.0 open source license.  It is represented in UML and includes modeling spanning electric power generation, transmission, and distribution domains.  It has been officially adopted by the International Electrotechnical Commission (IEC) and is designed to be used in power system planning, operation, and maintenance software and IT systems that support:</p> <ul> <li>SCADA (Supervisory Control And Data Acquisition)</li> <li>EMS (Energy Management Systems)</li> <li>Outage Management</li> <li>Capacity expansion planning</li> <li>Distribution automation</li> <li>Electricity market trading</li> <li>Teleprotection</li> </ul> <p>An essential artifact is the Unified Modeling Language (UML) schema for the CIM. The UML schema is a canonical ontology and defines all the classes, fields, and relationships between classes. </p> <p></p> <p>However, CIM UML by itself does not provide a way for users to create design artifacts such as database schemas, messaging schemas, source code, and reference documentation. This is where CIMTool comes in.</p> <p>The following illustration is a example of artifacts and standards involved when using CIMTool. These are grouped into four main categories:  Information Models, Contextual Profiles, Artifact Assembly, and Design Artifacts.</p> <p></p>"},{"location":"core-concepts/#information-models","title":"Information Models","text":"<p>Information Models are a primary input to CIMTool. The previously mentioned CIM UML is an Information Model. The CIM can also be customized through extensions or combined with other foreign Information Models that are completely separate from the CIM.</p> <p>See Import CIM UML for details on how to obtain a copy of the CIM UML and import it into CIMTool.</p>"},{"location":"core-concepts/#contextual-profiles","title":"Contextual Profiles","text":"<p>A Contextual Profile is a subset of the classes, attributes, and relationships from one or more Information Models. A Contextual Profile is typically  constructed for a specific use case. For example, a utility may be required to exchange their power system network model with a neighboring utility.  A Contextual Profile would be created to specify the classes, attributes, and relationships in that exchange. Contextual Profiles are sometimes  referred to as \"contextual models\" or just \"profiles\".</p> <p>A Contextual Profile is often given a basic name (e.g. \"CPSM\" or \"ERCOT16\") by it's creator as well as an assigned namespace to uniquely differentiate it from other Contextual Profiles. See Namespaces for more details on namespaces.</p> <p>The cardinality of a relationship in a Contextual Profile is either the same or more restrictive than the relationship in the Information Model.</p> <p>Note</p> <p>Within CIMTool, Contextual Profiles are managed using Web Ontology Language (OWL) format. These files typically have a <code>.owl</code> extension. It is important to note that Resource Description Framework (RDF) is part of the Web Ontology Language (OWL) stack so if you inspect a <code>.owl</code> file you will see RDF XML.</p>"},{"location":"core-concepts/#artifact-assembly","title":"Artifact Assembly","text":"<p>Contextual Profiles can then be processed in the context of a set of rules or standards to produce Design Drtifacts.</p> <p>In order to do this, the Contextual Profile is oten processed by a set of rules that govern the standards for a particular type of design artifact.  For example, if generating a CIM XML RDF Schema</p>"},{"location":"core-concepts/#design-artifacts","title":"Design Artifacts","text":"<p>Design artifacts are the outputs of CIMTool. There are many different types that get used depending on the use case but include:</p> <ul> <li>XML Schema for messaging exchanges</li> <li>RDF Schema for message exchanges or graph databases</li> <li>JavaScript Object Notation Schem (JSON Schema) for REST APIs or web applications</li> <li>SQL Schema for relational database schemas</li> <li>Hypertext Markup Language (HTML) for reference documentation</li> <li>Microsoft Word documents for reference documentation</li> </ul>"},{"location":"core-concepts/#namespaces","title":"Namespaces","text":"<p>In the CIM UML, each class name, such as ACLineSegment, is qualified by a namespace, such as <code>http://cim.ucaiug.io/CIM-schema-cim16#</code>. The combination of the namespace and class name forms a globally unique term. Having a globally unique term to identify a class is helpful for many reasons including version control, ownership, and validation of an instance against a schema. </p> <p>Note</p> <p>By convention, namespaces most commonly signify who the issuing authority of whatever class representation follows. The CIM UML model itself is open source and is made available under the Apache 2.0 open source license. Standards Development Organizations (SDOs) such as the International Electrotechnical Commission (IEC) or the European Network of Transmission System Operators for Electricity (ENTSO-E) may freely utilize the CIM under its licensing terms.  The IEC, for instance, utilizes the CIM as the foundation for the development of International Standards to support Transmission and Distribution operations and various backoffice functions. In practical applications, CIM standards published by the IEC are often used alongside project and vendor-specific extensions. Each of these may have an independent author. Separate namespaces are used to prevent name conflicts between them.</p> <p>Namespaces don't carry much information in themselves. A namespace can be any string but it is common and recommended to use an HTTP URI (e.g. <code>http://authority/...</code>) because it translates well to conventions followed in generated schemas (e.g. XML Schema) and it identifies the issuing authority. This is the convention commonly followed by many SDOs. For example, someone can easily find more information on the issuing authoriy by using something like whois.</p> <p>The namespace is also useful when generating schemas in other domains. For example, the namespace easily translates to derived XML schemas because an XML schema has a target namespace, declared in its header, that qualifies names defined in the body of the schema.</p> <p>Namespaces don't guarantee inheritance. For example, <code>http:/x/y/</code> is not necessarily a superset of <code>http://x/y/z/</code>. This also meant that historically you couldn't necessarily obtain a document from a namespace via HTTP protocol either. For example, an HTTP GET request to <code>http://cim.ucaiug.io/CIM-schema-cim16#</code> historically wasn't garuanteed to return anything. Note that this is changing starting with CIM18 and standards being developed starting in that version. This is being done to allow for fully machine readable processing of models.</p> <p>In the end, a namespace is just an identifier with the recommendation that it be an HTTP URI allocated by the IANA and its delegates.</p>"},{"location":"core-concepts/#version-control-and-namespaces","title":"Version Control and Namespaces","text":"<p>Namespaces prevent name conflicts between authors of classes. They are also used to prevent conflicts between different versions of a class's definition. For example, <code>http://cim.ucaiug.io/CIM-schema-cim17#ACLineSegment</code> might be a different ACLineSegment representation than <code>http://vendor/v1/CIM#ACLineSegment</code> or <code>http://entsoe.eu/2021/CIM-schema-cim17#ACLineSegment</code> and might be succeeded by <code>http://cim.ucaiug.io/CIM-schema-cim18#ACLineSegment</code> with a slightly different ACLineSegment representation as the class evolves in the model.</p> <p>The multiple versions of a class might be in use within the same context (e.g. same XML document). The potential conflict of the base name (ACLineSegment in this example) can be detected because the different versions have different namespaces. Resolving a version conflict would be the resposbility of any consuming application or system component.</p>"},{"location":"core-concepts/#contextual-profile-and-namespaces","title":"Contextual Profile and Namespaces","text":"<p>A Contextual Profile could generally be defined as a subset of an information model defined such that: An instance that conforms to the Contextual Profile also conforms to the general information model.</p> <p>The classes and properties in a Contextual Profile are subsets, or restrictions, of those in the information model.</p> <p>Tip</p> <p>For details on namespace support in CIMTool for custom extensions see CIMTool Support for Extension Namespaces.</p>"},{"location":"core-concepts/#choosing-a-namespace","title":"Choosing a Namespace","text":"<p>What namespace should be used for the terms in a Contextual Profile? There are two general approaches:</p> <p>1. Use Separate Namespaces In this case, separate names are used for the namespace of the Contextual Profile and the namespace of the general information model.</p> <p>The rationale for this approach is that Contextual Profile classes and properties are distinct from the general classes and properties they derive from. Therefore they require distinct namespace terms. Separate namespaces allow users to define restrictions for the Contextual Profile without affecting the general information model definitions. This also allows user to specify a specific Contextual Profile to which an instance should conform.</p> <p>2. Use the Same Namespaces In this case, the namespace of the Contextual Profile is the same as the namespace of the general information model.</p> <p>The rationale here is that the Contextual Profile definitions are consistent. Consistent means that, when all the definitions are asserted at once, there is a non-empty set of instances that conform with them. That is true for Contextual Profile and general information model definitions. Therefore it makes sense to use the same terms. In this approach, a restricted ACLineSegment class would have the same namespace as the general ACLineSegment class.</p> <p>One advantage of this approach is that the origin of any term in the profile is immediately obvious. Its namespace indicates the author (IEC, vendor, etc.). There is no need to correlate terms via the Contextual Profile definition. The same term is used everywhere.</p> <p>One disadvantage of this approach is that while a Contextual Profile will be consistent with the general information model, different Contextual Profiles are not necessarily consistent with each other. The same namespace term will end up denoting a different definition for the class in each Contextual Profile. In other words, the full set of terms are not globally distinct despite the use of namespaces. That breaks one of the architectural precepts namespaces are intended to address.</p> <p>Additionally, the 'same namespace' approach creates a number of other problems:</p> <ul> <li>Since profiles can't be distinguish by namespace, there is no deterministic way to associate instances with them. This becomes a matter for per-project and per-vendor conventions.</li> <li>There is no obvious way to version profiles separately from the general information model since the current convention is to indicate general information model versions via the namespace. This becomes a problem beacuse Contextual Profiles tend to undergo more than one formal release in the lifetime of a system. However, the CIM version is typically updated a an entirely different cadence.</li> <li>It is unworkable with XML schemas. Normal practice is to give each XML schema its own target namespace. To do otherwise often confuses XML tooling, making it impossible to write something like a Web Services Description Language (WSDL) involving more than one Contextual Profile schema.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>CIMTool is an Eclipse plugin written in Java so you can run CIMTool on Windows, Linux or Mac OS. However, only the Windows binary is built and published by maintainers, for other platforms you must compile from Java source. You'll need at least 2GB of free disk space (more if you will be working with large Contextual Profiles).</p>"},{"location":"getting-started/#step-1-download-cimtool","title":"Step 1 - Download CIMTool","text":"<p>Download the latest binary release of CIMTool here and extract. The CIMTool binary release is delivered as a ZIP archive (e.g. <code>CIMTool-x.x.x-win32.win32.x86_64.zip</code>) and once downloaded should be extracted to a folder on your machine. </p> <p>Example</p> <p>Extracting to the <code>D:\\</code> folder on a Windows system would result in a new  <code>D:\\CIMTool-2.1.0</code> folder containing CIMTool and it dependencies.  The launchable executable would be located at <code>D:\\CIMTool-2.1.0\\CIMTool.exe</code></p>"},{"location":"getting-started/#step-2-install-java","title":"Step 2 - Install Java","text":"<p>Starting with CIMTool release 2.0.0 and later you no longer need to download and install a Java runtime environment. Instead, the appropriate release of Java now comes bundled in the ZIP archive. All that is needed is to extract the ZIP file and then launch the CIMTool executable (i.e. <code>CIMTool.exe</code>). This greatly simplifies the installation process and if installing such a release you may skip over this step and proceed on to Step 3 below.</p> <p>If installing a release prior to 2.0.0, in order to successfully run CIMTool, a 64-bit Java 8 JRE/JDK must be installed. New supported releases of Java 8 are currently available at either of the below locations. Note that you should review the relevant licensing requirements for these downloads. Oracle may be more restrictive than for your purposes in which case the Zulu OpenJDK release may be preferable:</p> <ul> <li>Oracle JDK</li> <li>Zulu OpenJDK</li> </ul> <p>Once installed on your system you can execute <code>java -version</code> from a command prompt to determine what the default JRE/JDK is on your system:</p> <p>Example</p> <p></p> <p>In this example, we see from the results that on this system the default JRE/JDK is a version of Java 8 (i.e. version 332). There may be other versions of Java installed on the system but we know from the output that it will be the Java 8 installation that will be used to execute CIMTool by default if we double click the installed executable located at <code>D:\\CIMTool-1.12.0\\CIMTool\\CIMTool.exe</code> in our example.</p>"},{"location":"getting-started/#setting-up-alternate-jvm","title":"Setting up Alternate JVM","text":"<p>If the command line results indicate a different default Java version, then either a Windows shortcut or .bat script can be created so that an alternate (non-default) JVM can be used for launching CIMTool. These options can be configured in the following manner.</p>"},{"location":"getting-started/#option-1-windows-shortcut","title":"Option 1 - Windows Shortcut","text":"<p>Locate the directory containing the Java 8 JRE/JDK release you installed on your system (a 64-bit installation of Zulu for example will typically be located in either <code>C:\\Program Files\\Zulu\\zulu-8-jre\\bin\\java.exe</code> or <code>C:\\Program Files\\Zulu\\zulu-8\\bin\\java.exe</code> depending on whether you've downloaded a JRE or JDK release).</p> <p>In Windows right-click on the CIMTool.exe and select the menu option for creating a shortcut. Right-click on the new shortcut and select the Properties menu option. In the dialog that comes up explicitly specify as a command line parameter a 64-bit JVM to use at launch time.  This change must be specified in the \"Target:\" field.  In this working example, the resulting entry in that field would be:  <code>D:\\CIMTool-1.12.0\\CIMTool.exe -vm \"C:\\Program Files\\Zulu\\zulu-8\\bin\\java.exe\"</code></p> <p></p>"},{"location":"getting-started/#option-2-batch-script","title":"Option 2 - Batch Script","text":"<p>An alternative approach is to create a <code>CIMTool.bat</code> script containing command line execution similar to that shown below but which correlates to the installation locations native to your own local file system:</p> <pre><code>rem Launch CIMTool using a 64-bit Java JRE 8\nC:\\CIMTool-1.12.0\\CIMTool\\CIMTool.exe -vm \"C:\\Program Files\\Zulu\\zulu-8\\bin\\java.exe\"\n</code></pre> <p>Bug</p> <p>An issue was reported whereby CIMTool-1.10.0.RC1 and earlier releases no longer launch cleanly using newer releases of Java 8. The fix for this was introduced in the CIMTool-1.10.0.RC2 release.  Note that for users with older versions of CIMTool (e.g. 1.10.0.RC1, 1.9.7, or earlier) on their system those instances will no longer work if the Java 8 installation is upgraded to a newer release. To have co-existing instances of both old and new releases of CIMTool you will need to have both a new and older release of the Java 8 JRE/JDKs installed (in two distinct locations) and, in turn, distinct shortcuts and/or .bat files in order to specify the appropriate Java 8 JVM to use when launching CIMTool.</p>"},{"location":"getting-started/#step-3-launch-cimtool","title":"Step 3 - Launch CIMTool","text":"<p>Upon a successful launch of CIMTool the following dialog is presented. A default workspace (as shown by the example in the screenshot) will be used or you can enter your own location and name for a workspace to be created.</p> <p></p> <p>Select the OK button, and the workbench view will appear</p> <p></p> <p>Tip</p> <p>It recommended to not add, modify or delete anything inside a workspace directory manually or with tools other than CIMTool to prevent corrupting your project. However, if you ever see a message indicating 'resource out of sync', you can usually correct it by using File -&gt; Refresh or pressing F5.</p>"},{"location":"release-notes/","title":"Release Notes","text":"<p>This section contains CIMTool release notes and can be used for quick reference of what has changed in each version. Note that these notes are the same as those available on GitHub here, but contain more versions since this log pre-dates  GitHub being the version control system for CIMTool.</p>"},{"location":"release-notes/#release-220-01-oct-2024","title":"Release 2.2.0 [01-Oct-2024]","text":"<p>CIMTool 2.2.0 is a minor release with both enhancements and important defect fixes.</p> <p>Enhancement Issue #116: With the recent introduction of UUID and URI in CIM18 CIMTool was updated to support the new domain types. </p> <p>Enhancement Issue #141: CIMTool was updated to support Sparx EA IDs within the intermediary internal XML representation that it generates and makes available for use by custom XSLT transform builders.  This update is related to R&amp;D work being done within the standards community as part of potential use of LinkML as a semantic representation.  As a result the LinkML builder introduced in CIMTool 2.1.0 has been updated to include ea_guid in its generated output.  This can be used for more direct traceability to the UML elements (classes, attributes, associations, etc.) as natively identified within a Sparx EA UML model.  Note that ongoing work on the IEC 61970-501 Ed 2.0 draft standard is currently exploring LinkML as a semantics representation for the CIM.</p> <p>Enhancement Issue #142: An alpha of a new CIMTool builder is introduced that generates IEC 61970-501 Ed 2.0 draft spec RDFS. This is for experimentation purposes only and will be updated across releases to reflect the latest development of Ed 2.0 of the 501 standard.</p> <p>Enhancement Issue #143: Introduced in this release is support for the generation of UML class diagrams for graphical representation of your profiles in CIMTool. PlantUML is used as the internal representation due to its ability to meet a wide variety of requirements within the CIM and IEC standards community.  Amongst these requirements has included research into leveraging AsciiDoc for DevOps based standards publication generation.  In addition, PlantUML diagrams can be included in Draw.io (newly named Diagrams.net) diagrams.  PlantUML can easily be integrated into AsciiDoc, Markdown, or in online contexts that leverage PlantML plugins to integrate diagrams.. This initial release includes PNG and SVG export capabilities of PlantUML diagrams along with real-time visualization of invalid or incomplete elements in your profile as you build it. Visit the CIMTool website for forthcoming instructional videos on how to utilize new features. The use of PlantUML class diagrams for validating a profile will be included.</p> <p></p> <p>Defect Issue #154: The CIMTool RDFS2020 builder made available in the 2.0.0 release required additional development to both fix areas not in proper alignment with that generated by CimConteXtor. It should be noted that the builder currently generates RDFS2020 schema's with \"flattened\" CIMDatatypes (i.e. value, unit, multiplier attributes note defined within the generated RDFS). The final development for generating the \"unflattened\" CIMDatatypes (i.e. that explicitly define value, unit, multiplier, etc.) will be in a future release.</p> <p>Defect Issue #156: A post CIMTool 2.1.0 release task was to extensively test and address known issues related to profiling custom extensions using the newly supported 64-bit EA 16.x .qea, .qeax, and '.feap' project file types introduced in 2.1.0. This was decided to allow for 2.1.0 to be released to end users that only needed to profile using normative CIM without extensions. The outcome of this effort allows for profiling using a single EA project file (e.g. <code>.qea</code> or <code>.eap</code>) as your schema via the use of the <code>baseuri</code> tagged value for specifying the namespaces for your extensions with the <code>.eap</code>/<code>.qea</code> project file.  The resulting behavior when profiling using these new schema formats is designed to mirror the same behavior observed when using <code>baseuri</code> with multiple <code>.xmi</code> files to model extensions.</p> <p>Enhancement Issue #155: A new radio button has been added to the namespace list on the \"Import Schema\" dialog. The option allows selection of the existing namespace schema to be selected when re-importing a new version of the same named schema.  When selected the namespace field auto-populate with the existing namespace. This solves a usability issue for end users who are working against base CIM with custom extensions and who need iteratively to re-import schema changes as their model evolves. It eliminates end users exiting the dialog in order to copy the namespace in the preferences screen to be able to paste a custom namespace into the field.</p> <p></p> <p>NOTE:  This release does not yet address the issues as reported in the 2.0.1 release notes.  Fixes for custom extensions in RDFS XSLT builders is now targeted for the 2.3.0 release.</p>"},{"location":"release-notes/#release-210-09-aug-2024","title":"Release 2.1.0 [09-Aug-2024]","text":"<p>CIMTool 2.1.0 is a minor release with some useful enhancements and an important defect fix.</p> <p>Enhancement Issue #108: CIMTool did not yet support the new .qea and .qeax (64-bit) EA project file format introduced in the 64-bit Sparx EA 16.x releases.  This enhancement allows these EA project file types to be imported directly as your CIM schema.</p> <p>Enhancement Issue #114: CIMTool did not yet support the .eapx and .feap (32-bit) EA project file formats available in the 32-bit Sparx EA 15.x releases. The .feap format is an embedded Firebird database that works across both EA 15.x 32-bit and EA 16.x 64-bit release of the product. This specific type of EA project file is the only file format that can be opened in both 32-bit Sparx EA 15.x and 64-bit EA 16.x releases without conversion.  Note that this enhancement intersects the work identified in Issue #108.</p> <p>Enhancement Issue #118: This issues introduces a new builder to generate a LinkML representation of a CIMTool profile and is useful for a wide variety of downstream processing. The output from this builder can be leverage LinkML's core python toolchain which includes functionality like generators to convert schemas to other modeling languages and data converters and validators for working with data that conforms to LinkML (including RDF, JSON, and TSV). The following offer some useful background as to what LinkML is and how it can be leveraged: LinkML FAQ and LinkML Documentation</p> <p>Enhancement Issue #133: PNNL has contributed two new XSLT custom builders (see: cimantic-graphs) that generate python-based code for working with semantic graphs. These have been added as OOTB builders. Thanks to Alex Anderson for his contribution to the CIM community.</p> <p>Defect Issue #131: Aggregation relationships between classes were not appearing in either the \"Project Model\" view or the \"Add/Remove\" tab in CIMTool (only associations and generalizations were visible). Thanks to Walter Concert for catching and reporting the issue.</p> <p>NOTE:  This release does not yet address the issues as reported in the 2.0.1 release notes.  Fixes for custom extensions in RDFS XSLT builders are now targeted for the 2.2.0 release.</p>"},{"location":"release-notes/#release-201-12-may-2024","title":"Release 2.0.1 [12-May-2024]","text":"<p>CIMTool 2.0.1 is a patch release and should be utilized in place of CIMTool 2.0.0 until release 2.1.0 is finalized and made public.</p> <p>Defect Issue #115: During development of the CIMTool 2.1.0 release, issues in the generated output of the RDFS XSLT builders introduced in CIMTool 2.0.0 have been identified. Specifically, during the testing of the modeling of extensions for new .qea and .feap EA project files support. In the short term a 2.0.1 patch release must be issued that re-introduced the original builders until the fix is addressed in CIMTool 2.1.0.</p>"},{"location":"release-notes/#release-200-06-mar-2024","title":"Release 2.0.0 [06-Mar-2024]","text":"<p>CIMTool 2.0.0 is a major release and establishes a new 2.x release line for the next generation of features and functionality within CIMTool.</p> <p>Enhancement Issue #91: Migration of CIM Tool from the Eclipse 3.x to the Eclipse 4.x platform (e4) was done. This migration introduces no new functionality but instead addresses the need to re-baseline CIMTool to e4.  This new 2.x release line of CIMTool will serve as the basis for future functionality, enhancements, and roadmap planning.  Initial benefits of this release include:</p> <ul> <li>CIMTool can now execute using the latest version of Java - i.e. Java 20 </li> <li>UI rendering and responsiveness is much faster in the e4 platform when executing large profiling tasks</li> <li>Much more significant heap space - 4GB max configured OOTB</li> <li>Rebranding (i.e. new icons and splash screen have been introduced to reflect the new 2.0.0 release line)</li> </ul> <p>Defect Issue #75: This fix addresses a Java memory error when importing and display large <code>.xmi</code> files.</p>"},{"location":"release-notes/#release-1120-21-feb-2024","title":"Release 1.12.0 [21-Feb-2024]","text":"<p>CIMTool 1.12.0 is a minor release with some UI enhancements in usability and select defect fixes.</p> <p>Defect Issue #26: CIMTool's *.legacy-rdfs-augmented profile builder does not correctly generate the multiplicity of the secondary (i.e. inverse association) within the profile that it produces. This was discovered as part of the IEC 61970-452 published profile whereby the multiplicity for the Terminal.TieFlow inverse association 0..2 should have been generated as 0..2 but instead was generated as 0..n.</p> <p>Defect Issue #77: This fix addresses a regression issue introduced in the 1.11.0 release of CIMTool. In that release the modifications to the XSLT builder for generating XSDs the CIMTool feature for allowing multiple profiles per class no longer properly generated two distinct ComplexType(s) in the XSD.</p> <p>Enhancement Issue #78: A new builder was introduced to bring CIMTool RDFS-based profiles into alignment with the latest agreed upon RDFS2020 extensions/changes.</p> <p>Defect Issue #79: CIMTool's Stereotypes tab and UI does not correctly display all stereotypes imported from XMI/EAP schemas.</p> <p>Enhancement Issue #80: CIMTool currently only supports the generation of the older RDFS profile format (e.g. <code>*.legacy-rdfs</code> &amp; <code>*.legacy-rdfs-augmented</code>) and is not current with regard to the latest extensions/additions that were agreed upon and implemented within CimConteXtor / CimSyntaxGen tooling as the new \"RDFS2020\" profile format. A <code>*.legacy-cimcontextor.rdfs</code> RDFS is introduced here that produces a variant that is a cross between CIMTool's existing <code>*.legacy-rdfs-augmented</code> builder and the new <code>*.rdfs-2020.rdfs</code> builder associated with Issue #78.</p> <p>Enhancement Issue #81: CIMTool requires enhancements to support specifying when a top-level concrete class is to utilize an rdf:ID (local) or rdf:about (global) identifier within the profile. The introduction of the <code>&lt;&lt;Description&gt;&gt;</code> stereotype on a concrete class is used to flags this distinction in CimConteXtor. To represent the equivalent within CIMTool a new http://langdale.com.au/2005/UML#description stereotype has been introduced that can be assigned by an end user via one of the following methods: 2.0.0</p> <ul> <li> <p>The \"Stereotypes\" tab: </p> </li> <li> <p>The \"Restrictions\" tab: </p> </li> </ul> <p>Enhancement Issue #82: Currently, when the \"Add\" buttons are used to add selected class(s) or properties of a class to the profiles CIMTool defaults the cardinality on all member attributes to 1. Additionally, when selecting/adding a class to the profile that is intended to be concrete extra navigation to the \"Restriction\" tab is required to set it to \"concrete\". To provide enhanced usability and save time, the following updates have been made to the \"Add/Remove\" tab:</p> <ul> <li>A new checkbox labeled: \"Set selected classes to concrete when added to the profile\" was introduced. When the checkbox is in the checked state then the group of selected classes added to the profile will automatically be set as \"concrete\" in the profile.</li> <li>A new checkbox labeled: \"Set selected properties to required when added to the profile\" was introduced. When the checkbox is in the unchecked state then all attributes within a selected class or all attributes directly selected will default to a min cardinality of 0.</li> </ul> <p></p>"},{"location":"release-notes/#release-1111-14-feb-2023","title":"Release 1.11.1 [14-Feb-2023]","text":"<p>CIMTool 1.11.1 is a minor release with some UI enhancements in usability and select defect fixes.</p> <p>Defect Issue #58: The CIMTool builders were updated to produce target artifacts (RDFS, OWL, etc.) that now have RDF/XML elements ordered in a consistent and deterministic manner. This was needed so that CIMTool projects hosted in a GitHub repository could have file-based comparisons performed using GitHub's built in features.</p> <p>Enhancement Issue #57: Based on user feedback the \"Import Copyright Templates\" wizard needed to be enhanced to allow an end user to select an option for using the default UCAIug copyright headers for an existing project.  This without having to import them from the file system.  This feature already existed within the \"New Project\" wizard but needed to be added to the copyright templates wizard.</p> <p>The enhancements made to the existing \"Import Copyright Templates\" wizard screen are shown in the below table (click on the images to present a larger view):</p> Import Copyright Templates (OLD) Import Copyright Templates (NEW)"},{"location":"release-notes/#release-1110-28-sep-2022","title":"Release 1.11.0 [28-Sep-2022]","text":"<p>CIMTool 1.11.0 is a minor release with some UI enhancements in usability and select defect fixes.</p> <p>Defect Issue #47: Custom copyrights were not being imported properly in the \"New Project Wizard\" for the custom copyright template option.</p> <p>Defect Issue #48: Copyright headers fail to update in OWL profiles on import of new headers in the \"Import\" Wizard.</p> <p>Enhancement Issue #49: Screens introduced in release 1.10.0 to the \"Import\" and \"New CIMTool Project\" wizards have been redesigned.  </p> <p>In the \"New CIMTool Project\" wizard the previous Steps 2 and 3 have been consolidated into the single screen shown below (click on the image to present a larger view).  This removes ambiguity and improves usability for end users when creating projects.</p> <p></p> <p>On the \"Import\" wizard previously there were two separate import copyright template options; one for muiltline and another for single-line templates.  This has been consolidated into a single screen.</p> Updated CIMTool Import Options Import Copyright Templates"},{"location":"release-notes/#release-1101-02-sep-2022","title":"Release 1.10.1 [02-Sep-2022]","text":"<p>This is a patch release for CIMTool 1.10.0</p> <p>Enhancement Issue #39: During preparation for the new CIMTool-Builders-Library repository it was discovered that the new profile-doc-rtf.xsl builder entry in the <code>.builders</code> file that was introduced in the 1.10.0 release was incorrectly defined.  This has been corrected.</p> <p>Enhancement Issue #40: Within the CIMCheck sub project it was discovered that when the upgrade to ICU4J-71.1 occurred during the 1.10.0.RC2 release that the <code>.xml</code> build script and html files for the project were not updated to reflect the needed changes for the classpath for CIMCheck. This has been corrected as part of this 1.10.1 patch release.</p>"},{"location":"release-notes/#release-1100-26-aug-2022","title":"Release 1.10.0 [26-Aug-2022]","text":"<p>This is the production release of CIMTool 1.10.0</p> <p>Enhancement Issue #3:  As of release 1.10.0.RC1 CIMTool's internal XSLT transform builders \"engine\" has be made public to end users with new screens added to import custom profile builders.  The internal XSLT processor in CIMTool was the Apache Xalan project.  However, Apache Xalan is a W3C XSLT 1.0 compliant XSLT processor.  To support the much richer feature set defined in the XSLT 3.0 specification the XSLT engine has been replaced by Saxon HE 10.8.  Saxon is XSLT 1.0, 2.0, and 3.0 compliant.</p> <p>Enhancement Issue #27:  A new builder for auto-generation of profile documentation has been added to the set shipped OOTB.  This builder produces a Microsoft Word compatible RTF (Rich Text Format) document when selected in the Profile Summary Tab.  Click on the images to present a larger view.</p> Profile Summary Tab Example RTF Word Document <p>Enhancement Issue #30:  The new copyright templates are are now also applied to the headers of the profile definitions themselves (i.e. *.owl files).</p> <p>Enhancement Issue #28:  Additional screens have been added to the \"New CIMTool Project\" wizard used when creating a new CIMTool project.  These screens now appear as Steps 2 and 3 in the create project process.  Below provides an overview of the Wizard (click on the images to present a larger view).</p> Step 1 Step 2 (NEW) Step 3 (NEW) Step 4"},{"location":"release-notes/#release-1100rc3-28-jul-2022","title":"Release 1.10.0.RC3 [28-Jul-2022]","text":"<p>This is the third release candidate for CIMTool 1.10.0</p> <p>Fix Issue #21:  Eliminated superfluous namespaces that are being generated by the IEC 62361-100 compliant XSD schema builder that ships with CIMTool.</p> <p>Enhancement Issue #23:  CIMTool's internal message model definition has been extended with the addition of two new attributes for Choice elements that can be used by CIMTool builders. The purpose of the new attributes is to make easily available to XSLT-based builders the topmost class in a type hierarchy for a union defined in a profile.  </p> <p>Enhancement Issue #20:  All builders that generate RDFS and OWL profiles were updated to utilize the new custom copyright template capabilities.</p> <p>Enhancement Issue #22:  Custom copyright templates are now supported in CIMTool.  A copyright template is defined as an external file containing the text of either a multi-line or single-line copyright to be used by builders for inclusion in the artifacts that they generated (e.g. XSD schema, RDFS, or JSON schema profiles).  A template must include a ${year} substitution variable which is recognized by CIMTool and substituted with the current year at the time a builder is executed.  A UCAIug Apache 2.0 copyright template is bundled out-of-the-box with CIMTool and used as the default copyright template if an alternate is not set after a project is created.  Both multi-line and single-line copyright templates are supported and can be imported/assigned using new import screens introduced in this release and shown below.  </p> New CIMTool Import Options Copyright Template Import"},{"location":"release-notes/#release-1100rc2-20-jun-2022","title":"Release 1.10.0.RC2 [20-Jun-2022]","text":"<p>This is the second release candidate for CIMTool 1.10.0</p> <p>Feature Issue #16:  Support for the new IEC 62361-104 draft standard for JSON schema profiles has been updated from that introduced in the RC1 release.  The builder now reflects the most recent changes to the JSON draft specification.  However, this does not yet include namespace support for custom extensions to be included in the published standard.  Updates to the builder for namespace support is planned for RC3.</p> <p>Feature Issue #7:  A new out-of-the-box builder has been introduced to generate XSD profiles that are compliant with the newly published 2nd Edition of the IEC 61968-100 international standard.</p> <p>Feature Issue #15:  XSD and JSON schema builders in CIMTool have been updated to include an official UCAIug Apache 2.0 copyright header in their output.</p> <p>Fix Issue #14:  CIMTool failed on startup when using the latest releases of the Java 8 JRE/JDK.  It was determined that at some point in the release history of these JRE/JDKs that the ICU4J project utilized for internationalization support was upgraded in the JRE/JDK. Therefore, the ICU4J jar file originally included in the release of CIMTool has been upgraded to the latest release of jar file for the ICU4J project.</p> <p>Fix Issue #6:  Fix for a regression issue in the xsd.xsl builder.</p>"},{"location":"release-notes/#release-1100rc1-06-may-2020","title":"Release 1.10.0.RC1 [06-May-2020]","text":"<p>This is the first release candidate for CIMTool 1.10.0</p> <p>Feature: The RC1 release introduces support for the new IEC 62361-104 draft standard for JSON schema profiles. This RC does not include the variant of namespace support that will be included in the published standard. That is planned for RC2.</p> <p>Enhancement: CIMTool supports a variety of different types of builders that generate profile artifacts. Examples include XSD schemas, JPA Java source code, RDBMS DDL scripts, RDFS profiles, etc. The ability to create custom profile builders has been available via CIMTool Eclipse plugin extension points, but such an approach requires an understanding of Eclipse plugin development. Internally, CIMTool supports a category of builders based on XSLT transforms. This release exposes this functionality by providing a configuration-based approach to adding custom XSLT transform-based builders that will automatically appear within CIMTool's \"Profile Summary\" tab. This enhancement allows for the use of tools such as Altova's XMLSpy to create and test XSLT 1.0 transforms and then import and manage them in CIMTool.</p> <p>CIMug's goal for this enhancement is to create a repository of custom XSLT transforms contributed by the community and, in turn, beneficial to the CIM community at large.</p> <p>Launch paths to the new UI screens (click on the images to present a larger view):</p> From the Select Import Wizards Screen... ...Launches the Import XSLT Builder Screen From the Profile Summary Tab... ...Launches the Manage XSLT Transform Builders Screen"},{"location":"release-notes/#release-197-09-dec-2013","title":"Release 1.9.7 [09-Dec-2013]","text":"<p>correction: .eap files are closed after parsing and can now be deleted from a project.</p>"},{"location":"release-notes/#release-196-10-sep-2013","title":"Release 1.9.6 [10-Sep-2013]","text":"<p>enhancement: platform updated to eclipse Indigo.</p> <p>enhancement: direct import of EA project files. This is now the default option on the import file selector. The capability is provided by a new release of the jackcess library with MS Jet3 compatitbility.</p> <p>enhancement: convenience button for the CIM 16 namespace.</p> <p>correction: help facility restored.</p>"},{"location":"release-notes/#release-195","title":"Release 1.9.5","text":"<p>This is one of a series of beta testing releases. See the blurb, New and Notable for 1.9. This release adds:</p> <ul> <li>Map primitive 'duration' to xs:duration. (Note: we already map decimal, date, time, dateTime to XSD types of the same name.)</li> <li>Mappings of AbsoluteDate and AbsoluteTime removed. (Can't remove other oddball mappings such as AbsoluteDateTime because that would affect legacy schema generation.)</li> </ul>"},{"location":"release-notes/#release-194","title":"Release 1.9.4","text":"<p>This release was not generally made available pending resolution of CIM data and time type issues.</p> <p>This is one of a series of beta testing releases. See the blurb, New and Notable for 1.9. This release adds:</p> <ul> <li>Hard coded translation of CIM datatypes AbsoluteDate and AbsoluteTime to xs:date and xs:time. This is to get around a (hopefully temporary) problem in the CIM where these identifiers were used instead of the XSD ones.</li> </ul>"},{"location":"release-notes/#release-193","title":"Release 1.9.3","text":"<p>This is one of a series of beta testing releases. See the blurb, New and Notable for 1.9. This release adds:</p> <p>enhancement: profile repair and remapping to the CIM will ignore case when searching for a CIM term if an exact match can't be found.</p> <p>Java SE 1.6 is now the minimum requirement for the JVM</p> <p>correction: a bug interpreting .eap files caused namespaces to be incorrectly assigned in some cases.</p> <p>enhancement: recognise ontology headers in annotations files. The given namespace overrides the default namespace for their schema (or CIM). This also triggers an improved package URI generation scheme.</p> <p>correction: change the heap memory maximum to 1GB (from 2GB) allowing the product version of CIMTool to run on more systems.</p> <p>enhancement: cosmetic changes to startup.</p> <p>enhancement: added schema mapping wizard to 'new' menu.</p>"},{"location":"release-notes/#release-192-09-jan-2011","title":"Release 1.9.2 [09-Jan-2011]","text":"<p>This is one of a series of beta testing releases. See the blurb, New and Notable for 1.9. This release adds:</p> <p>enhancement: tree views in the user interface retain their state accross refreshes including save profile and navigation away from a node and back again. This makes it easier to keep your place in the model during profile building.</p> <p>Updated Ecore functionality to enable registered EPackages to be used for the base schema. Updates to the Ecore generation to ensure profiled Ecore matches the package hierarchy of the base if the base is also Ecore. Removed unused legacy merged schema generation</p>"},{"location":"release-notes/#release-191","title":"Release 1.9.1","text":"<p>This is a beta testing release to trial a number of major changes. See the blurb, New and Notable for 1.9. In summary:</p> <ul> <li>Generalised profile editing.</li> <li>Schema mapping and extension editor.</li> <li>Ecore model support.</li> <li>Recognise new CIMDatatype stereotype.</li> </ul>"},{"location":"release-notes/#release-183-10-aug-2010","title":"Release 1.8.3 [10-Aug-2010]","text":"<p>correction: improved backwards compatibility with version 1.7 for profile (.owl) files. A profile can be round-tripped from 1.7 to 1.8.2 and back repeatedly. In 1.8.2 this caused errors in the profile editor.</p> <p>enhancement: basic validation for the new standard headers in CIM/XML documents. This reduces the number of spurious validation errors.</p>"},{"location":"release-notes/#release-182-05-jun-2010","title":"Release 1.8.2 [05-Jun-2010]","text":"<p>The release corrects the following defect in 1.8.1:</p> <p>correction: a defect in handling of attributes (datatype properties) caused spurious validation errors and incorrectly generated XML schema.</p>"},{"location":"release-notes/#release-181-06-feb-2010","title":"Release 1.8.1 [06-Feb-2010]","text":"<p>This release incorporates changes to make CIMTool compatible with commonly used ontology editors. It has been tested with Protege 4 and Top Braid 3.2.</p> <p>enhancement: namespaces for OWL files are not longer stored as properties in the CIMTool project they are embedded in the files as part of the ontology header. This change affects the user interface for profile properties as well as several wizards and the Detail tab of the profile editor for the root element of the profile.</p> <p>enhancement: the ontology header is now compliant and includes the profile description, label, and (implicitly) namespace. the .owl header includes an import for the merged information schema.</p> <p>enhancement: CIM datatypes are now modeled using equivalentClass axioms. Anonymous classes in their profile are linked by equivalentClass or subClass to their respective information model classes.</p>"},{"location":"release-notes/#release-173","title":"Release 1.7.3","text":"<p>correction: profile validation rules for the case where a member of a child class is lifted into a parent caused spurious diagnostics. This affected the EndDeviceAssett profile in the IEC 61968 part 9 profiles.</p>"},{"location":"release-notes/#release-172-10-nov-2009","title":"Release 1.7.2 [10-Nov-2009]","text":"<p>correction: Older Rose based CIM versions sometimes have invalid, top level datatype definitions. Attempts in release 1.4.1 to deal with these in some older EDF CIM versions broke compatibility with some older Siemens models. They are now interpreted even more flexibly in the light of other definitions to obtain a valid overall model.</p>"},{"location":"release-notes/#release-171-10-nov-2009","title":"Release 1.7.1 [10-Nov-2009]","text":"<p>correction: the inverse properties that are added the profile for the \"augmented\" OWL and RDFS artifacts are incorrect when the range and domain are related by inheritance.</p>"},{"location":"release-notes/#release-169-19-oct-2009","title":"Release 1.6.9 [19-Oct-2009]","text":"<p>enhancement: new .simple-flat-owl format which corresponds to the simple-owl format in version 1.6.3</p>"},{"location":"release-notes/#release-168-30-sep-2009","title":"Release 1.6.8 [30-Sep-2009]","text":"<p>enhancement: new options on the profile add/remove page control whether super or sub class members are available. It is now possible to redefine or separately define a member in subclasses.</p>"},{"location":"release-notes/#release-167","title":"Release 1.6.7","text":"<p>correction: ensure artifact generation runs to completion even when a profile contains severe errors.</p>"},{"location":"release-notes/#release-166-27-sep-2009","title":"Release 1.6.6 [27-Sep-2009]","text":"<p>correction: a problem introduced in 1.6.5 that prevented importing Enterprise Architect Jet4 projects</p>"},{"location":"release-notes/#release-165-26-sep-2009","title":"Release 1.6.5 [26-Sep-2009]","text":"<p>enhancement: additional help</p> <p>correction: corrected problem introduced in 1.6.4 with the new simple-owl format that also affected validation</p> <p>note: deployment now contains separate plugins for the main supporting libraries</p>"},{"location":"release-notes/#release-164-26-sep-2009","title":"Release 1.6.4 [26-Sep-2009]","text":"<p>new feature: profile searching and enhanced CIM searches. The search wizard is now available on the profile outline as well as the add/remove page and the project model view. The wizard now shows all matching classes, properties or other items in a list with context and allows the user to navigate to a specific hit.</p> <p>enhancement: the Project Model View and the Documentation view now track selections made in the profile editor add/remove page and profile outline. This makes it much easier to choose items to add to a profile. It also works well with the new profile search wizard to explore a profile.</p> <p>enhancement: the format of the simple-owl and simple-owl-augmented files has been changed to eliminate all nodeID attributes. Restriction elements are nested directly in Class elements to which they apply. Some URI's have been shortened due better choice of the base namespace.</p>"},{"location":"release-notes/#release-163-26-sep-2009","title":"Release 1.6.3 [26-Sep-2009]","text":"<p>enhancement: more robust import of Enterprise Architect project databases, ignoring errors such as disconnected attributes.</p>"},{"location":"release-notes/#release-162-26-sep-2009","title":"Release 1.6.2 [26-Sep-2009]","text":"<p>new feature: the Documentation View continuously shows documentation from the CIM for the current selection. To see this view, enter the CIMTool perspective using Window &gt; Open Perspective and reset it using Window &gt; Reset Perspective.</p> <p>new feature: the Browsing Perspective is designed for browsing the CIM. To use it, choose Window &gt; Open Perspective &gt; CIMTool &gt; Browsing and select a project in the Project Explorer View. Use the Project Model View and its Jump and Search buttons (top right of view) to browse. This perspective is sometimes easier to use than a standard UML editor, especially if the UML diagrams are not complete.</p> <p>enhancement: addition profile checking rules and actions in the repair assistant. These detect and repair several profile problems discovered in the wild. A rule that caused a false alarm in the 61968-9 profiles has been rectified.</p> <p>enhancement: the Project Model View now has a Jump button (next to Search) that moves the selection to the opposite end of an association or subclass-superclass relationship.</p> <p>correction: Resource names containing spaces caused processing of the project to stall.</p>"},{"location":"release-notes/#release-161-26-sep-2009","title":"Release 1.6.1 [26-Sep-2009]","text":"<p>new feature: Profile Repair Assistant.</p> <p>The Profile Repair Assistant helps correct errors in profiles, especially those which arise when the profile is paired with an updated CIM.</p> <p>Each time a profile is saved or a the CIM schema is changed, the profile is checked against a set of rules. If any errors are detected, a repair file appears as a red icon adjacent to the profile in the project explorer.</p> <p>Opening the repair file causes the repair assistant to run, which displays the errors and offers suggested repair actions. Any desired repairs can be checked and are applied when the save button is pressed.</p> <p>new feature: directly import Enterprise Architect project files</p> <p>The create project and import schema wizards now offer the option to directly import an Enterprise Architect project file. This eliminates the need to create an XMI file for import to CIMTool and speeds up the round trip when the CIM or an extension is edited concurrently with a profile.</p> <p>The feature is limited to EA project files in the Jet4 format. This requires the project to be converted to Jet4 and the \"use Jet4\" option in EA to be enabled.</p> <p>new feature: cardinality for concrete profile classes.</p> <p>It is mow possible to set the minimum and maximum cardinality of a a top-level, concrete class. This is reflected in generated XML schemas by the cardinality of the corresponding first-level element defintions.</p> <p>new feature: preliminary support for compound datatypes.</p> <p>The &lt;&gt; stereotype is now recognised and compound classes are displayed and documented differently to normal classes. <p>enhancement: namespaces and other settings are stored in the project, enabling projects to be exported and imported between projects without loss of information or functionality.</p> <p>enhancement: commonly used namespaces are offered by the schema import and project creation wizards.</p> <p>enhancement: profile namespace checked against schema namespaces in the import profile and new profile wizards. conflicts between the profile namespaces and a schema namespace are prevented.</p> <p>enhancement: improved software update system (better support of the P2 provisioning system)</p> <p>enhancement: now based on eclipse 3.5 (Galileo)</p> <p>correction: the namespace field in the import schema wizard was ignored.</p> <p>correction: cases where the build system failed to trigger a build or triggered the same build twice corrected.</p> <p>correction: the bases of an anonymous profile class could not be changed on the hierarchy page of the profile editor.</p>"},{"location":"release-notes/#release-155-12-may-2009","title":"Release 1.5.5 [12-May-2009]","text":"<p>new feature: CIMTool can now generate java class definitions with JPA annotations. These classes can be used in a java program to implement the objects of a CIM profile.</p> <p>The JPA (Java Persistance API) annotations map the classes to relational database tables. Thus the CIM profile objects can be loaded from and saved to a database with a minimum of effort. The JPA feature has been tested with a Hibernate and Oracle combination. See http://hibernate.org</p> <p>The database can be created using the DDL feature released in version 1.4.4.</p> <p>To use these features, check the SQL and java builder options on the summary page of your CIM profile. SQL and java artifacts will be created. The database structure is described in the CIMTool help.</p> <p>correction: a regression in version 1.5.4 affecting mRID fields in SQL artifacts was fixed.</p>"},{"location":"release-notes/#release-154-12-may-2009","title":"Release 1.5.4 [12-May-2009]","text":"<p>enhancement: A description can be added to a profile and edited on the profile editor detail tab. It will appear in the HTML documentation and as an annotation to any XML schema.</p> <p>enhancement: The profile envelope name is now preserved when profiles or projects containing profiles are exported and imported. It, and the description, are stored within the profile OWL file and it is edited on the detail tab instead of the property dialog box.</p>"},{"location":"release-notes/#release-153-09-mar-2009","title":"Release 1.5.3 [09-Mar-2009]","text":"<p>enhancement: HTML profile documentation changed to more closely follow the part 301 format. Inherited members are shown for each class, grouped by superclass.</p>"},{"location":"release-notes/#release-152-01-feb-2009","title":"Release 1.5.2 [01-Feb-2009]","text":"<p>enhancement: accept comments encoded in as 'description' tags from some XMI documents generated by EA</p> <p>correction: the outline and add/remove display was not updating following the assignment of a type to an element (ie a profile property).</p>"},{"location":"release-notes/#release-151-21-jan-2009","title":"Release 1.5.1 [21-Jan-2009]","text":"<p>enhancement: updated CIMTool help</p> <p>correction: the remap profile to schema function failed for some profiles</p> <p>package with eclipse 3.4 platform for windows (no JDT hence lighter download)</p> <p>Development Releases 1.4. Caveat: Releases 1.4. are development releases. They contain internal changes in preparation for the a new guided profile update feature. While they pass the CIMTool test suite and unstructured testing, there could nevertheless be regressions.</p> <p>The 1.4.* releases can be only obtained from an eclipse update site at: http://files.cimtool.org/development</p> <p>Stable releases are preferred and these are available in a number of forms detailed here: http://wiki.cimtool.org/Download.html</p>"},{"location":"release-notes/#development-release-144-21-jan-2009","title":"Development Release 1.4.4 [21-Jan-2009]","text":"<p>new feature: CIMTool can now generate a database schema from a CIM profile. This is done by selecting the \"SQL\" option in the profile editor. An SQL92 DDL artifact is generated. This has been tested for compatibility with Oracle 10g.</p> <p>The generated code includes tables and fields for classes and properties and comments are copied through for clarity. Constraint definitions are generated for mandatory/optional cardinality, enumeration membership, association type and class inheritance.</p> <p>Class inheritance has been implemented using the PK-PK join approach.</p> <p>correction: the comparison functions were not configured correctly in the previous release and would yield no results.</p> <p>correction: a regression causing the cardinality of some associations extracted from xmi to be incorrect.</p> <p>correction: a regression in the \"make leaf classes concrete\" function caused all classes to be marked as not concrete.</p> <p>correction: an infinite loop when generating artifacts from some profiles containing a circular association.</p> <p>correction: the eclipse platform sometimes reported errors when a profile was deleted.</p>"},{"location":"release-notes/#development-release-143-21-jan-2009","title":"Development Release 1.4.3 [21-Jan-2009]","text":"<p>enhancement: comparisons of profiles to profiles or schema to schema are now much faster and require much less memory. These operations now use CIMTool's cache for the inputs.</p> <p>enhancement: Repair and remap profile function now corrects the namespace of enumeration values</p> <p>enhancement: enumerations can now be added directly to the profile (previsously they were added only as a side effect of property definition)</p> <p>correction: a regression prevented restriction of the range of a property to a subclass.</p> <p>correction: enumeration restrictions were not carried into the generated OWL and RDFS artifacts and were not validated in instance documents.</p>"},{"location":"release-notes/#development-release-142-21-jan-2009","title":"Development Release 1.4.2 [21-Jan-2009]","text":"<p>new feature: profile consistency checking and problem display. CIMTool will check each profile against the project schema during the build phase. Inconsistencies are recorded in a diagnostic file which can be viewed with CIMTool's diagnostic editor (also used for instance validation).</p> <p>When consistency errors exist error markers appear on the profile resource (in the Project Explorer view) and the affected profile elements in the profile outline view. A entry is also added to the eclipse problems view.</p> <p>This is a first release of this feature and only the most common inconsistencies are detected. Some further improvements in the checking algorithm and the user interface may be expected.</p> <p>Note: to check profiles a project build must be triggered. A trigger is generated if the schema (CIM and extensions) or a profile is updated.</p> <p>new feature: support for the &lt; and &lt;&gt; stereotypes defined by EDF Research. These stereotypes are used to define CIM extensions. CIMTool displays extensions marked with these stereotypes using distinctive icons and. In profile editing, extension class members can be added directly to the profile of the extended CIM class. <p>enhancement: support for the Siemens PowerCC namespace tags. These tags associate a namespace prefix such as 'ext' with each individual class, association or attribute. To use this information you must declare each prefix in the annotation file with a statement like this:</p> <p>http://www.ercot.com/CIM11R0/2008/2.0/extension# uml:uriHasPrefix \"etx\" .</p> <p>enhancements to support some older versions of CIM and EDF models:</p> <p>do not accept top level datatype definitions in an XMI file as written. Flexibly assign a type to these identifiers based on related definitions found elsewhere in the model.</p> <p>accept 'units' as well as 'unit' for the units attribute of a datatype</p> <p>correction: the baseuri tag was not recognised in some XMI files.</p> <p>corrections: various regressions introduced in the 1.4.1 development release.</p>"},{"location":"release-notes/#development-release-141-21-jan-2009","title":"Development Release 1.4.1 [21-Jan-2009]","text":"<p>First release with internal changes to the ontology API needed for future features.</p> <p>new feature: Schema comparison using the eclipse compare functionality. Each project has at least one schema file (generally a .xmi file) in the Schema folder. To compare two schemas, select them in the Navigator, right click and choose Compare With &gt; Each Other. To compare a schema with a recent version select it, right click and choose Compare With &gt; Local History.</p> <p>new feature: Integrated help. To access CIMTool help and documentation within eclipse, choose Help &gt; Help Contents from the main menu. Look for the topic \"Common CIMTool Tasks\" in the table of contents. In the release, the included help consists of the most useful material from the http://cimtool.org web site.</p>"},{"location":"release-notes/#release-133-11-sep-2008","title":"Release 1.3.3 [11-Sep-2008]","text":"<p>new feature: \"Add package name to default schema namespaces\" preference causes unique RDF namespaces to be generated from the UML package hierarchy.</p> <p>new feature: CIM/XML profiles can now have more than one restriction, in different contexts, on the same property. This was previously only supported for XSD profiles.</p> <p>The simple-owl format now preserves all property restrictions and the validation rules have been reworked to enforce them.</p> <p>The standard CIM/XML RDFS format cannot support this and CIMTool rolls up the restrictions into a single, consistent property definition.</p> <p>correction: when rolling up restrictions to base classes for RDFS, they are always relaxed. this prevents restrictions from incorrectly affecting sibling classes.</p> <p>correction: use the concrete stereotype in validation instead of treating the leaf classes as concrete. The \"Stereotype leaf classes as concrete\" operation can be used to obtain the previous behaviour.</p> <p>enhancement: stereotypes assigned in the profile editor are copied into the generated RDFS and simple-OWL.</p> <p>enhancement: build target flags and stereotypes defined in a profile are preserved in the \"Reorganize per RDFS Rules\" operation.</p> <p>enhancement: the property sheet view for diagnostic nodes has been improved.</p> <p>enhancement: tested with eclipse 3.4 (Ganymede)</p>"},{"location":"release-notes/#release-132-11-sep-2008","title":"Release 1.3.2 [11-Sep-2008]","text":"<p>correction: allow unnamed schema properties to be profiled</p> <p>new feature: sawsdl semantic annotations in generated XML Schema see: http://www.w3.org/TR/sawsdl/</p> <p>enhancement: generated HTML profile documentation reworked with better ordering and formating of information.</p> <p>enhancement: package names added to properties sheet and generated profile documentation.</p>"},{"location":"release-notes/#release-131-11-sep-2008","title":"Release 1.3.1 [11-Sep-2008]","text":"<p>new feature: Property sheet view shows details of the selected profile or schema definition. This view has been added to the CIMTool perspective. From the menu choose Window &gt; Reset Perspective to update your perspective. The property sheet replaces some of the fields on the profile editor detail page.</p> <p>new feature: Profile comparisons using the eclipse compare functionality. To compare two profiles, select them in the Navigator, right click and choose Compare With &gt; Each Other. To compare a profile with a recent version select it, right click and choose Compare With &gt; Local History.</p> <p>enhancement: preserve association documentation from EA UML 1.4 (Rose compatible) XMI export files. It is now possible to use EA models with CIMTool using those XMI export settings.</p> <p>new feature: simple-owl-augmented and legacy-rdfs-augmented targets can be built from a profile. The new targets provide both a forward and inverse property for each property defined in the profile. They replace the old nested-simple-owl and nested-legacy-rdfs build targets. Build new build targets can be selected on the profile editor summary page.</p>"},{"location":"release-notes/#release-125-18-jul-2008","title":"Release 1.2.5 [18-Jul-2008]","text":"<p>new feature: add a class hierarchy page to the profile editor</p> <p>new feature: allow more than one named profile per information model class</p> <p>correction to search feature: failed to display matches in some cases</p>"},{"location":"release-notes/#release-124-10-jul-2008","title":"Release 1.2.4 [10-Jul-2008]","text":"<p>change schema tree icons to reflect UML aggregation and composition</p> <p>the 'make leaf classes concrete' option in the profile editor now does exactly that and ignores other</p> <p>capture aggregation annotations from Unisys XMI input</p> <p>support for non-standard primitive to XSD part II mappings</p>"},{"location":"release-notes/#release-123-03-jul-2008","title":"Release 1.2.3 [03-Jul-2008]","text":"<p>Fix regression: ProjectModelView not responding to selection or double click</p>"},{"location":"release-notes/#release-122","title":"Release 1.2.2","text":"<p>Fix a jena ConversionException when remapping profile to new CIM namespace.</p> <p>Add missing wizard for new incremental validation rules.</p> <p>Correct title in import schema wizard.</p>"},{"location":"release-notes/#release-121","title":"Release 1.2.1","text":"<p>Released under LGPL.</p> <p>Remove a Java 6 dependency.</p>"},{"location":"release-notes/#release-117","title":"Release 1.1.7","text":"<p>Added AbsoluteDateTime to the built-in list of fundamental types. It is mapped to an xsd:datetime</p> <p>Fixed a regression that prevented the Import Incremental Model wizard from being completed.</p> <p>Fixed a regression in the Validation View in the Validation Perspective. The view action buttons were missing.</p>"},{"location":"release-notes/#release-116","title":"Release 1.1.6","text":"<p>Fixed a bug in the backwards compatibility code for the 1.1.5 profile format change. The symptom was a failure to generate XML schemas from profile created in earlier versions.</p> <p>A bug in the handling of the unit attribute of datatype definitions has been corrected.Unit and multiplier values should now be captured in the whole-of-schema OWL output as annotation properties. (Although there don't seem to be many multiplier values defined in the CIM so far.) To see this output choose File|Export|CIMTool|Export Merged Schema from the menus.</p> <p>The schema search wizard has been added to the profile editor.Look for a search button on the top right of the Add/Remove page. Classes can found by typing in a few characters of their name or the name of one of their properties and selecting the desired match.</p>"},{"location":"release-notes/#release-115","title":"Release 1.1.5","text":"<p>The form of the generated XML schema has been changed in the case where a property is defined with more than one range type. In this case no element is generated for the property and an xsd:choice of element representing the types appears.</p> <p>A new stereotype \"Preserve\" has been defined. When assigned to a property it causes the property element to be generated wrapping the type elements. This can be used to avoid ambiguities that the above schema generation rule might cause.</p> <p>A schema search wizard has been added for testing. It is accessed from the project model view toolbar.</p>"},{"location":"release-notes/#release-114","title":"Release 1.1.4","text":"<p>Numerical cardinality values other than 0, 1 and unbounded are now supported.</p> <p>The Add/Remove tab now has fields for entering the min and max cardinality of a property as well as check boxes for the common options. As before, cardinality values that would exceed those defined in the CIM for the given property are not allowed.</p> <p>Cardinality values are carried through the generated XML schema. In the generated RDFS or simple-owl any cardinality greater than one is treated as unbounded because those formats do not allow for arbitrary values.</p>"},{"location":"release-notes/#release-113","title":"Release 1.1.3","text":"<p>Completed performance enhancements, improving the display refresh behavior in the profile editor.</p>"},{"location":"release-notes/#release-112","title":"Release 1.1.2","text":"<p>Numerous regressions that crept into 1.1.1 have been corrected.</p> <p>Performance of the profile editor has been improved. There may be some minor display refresh problems introduced by this work, but the editor is much more pleasant to use.</p> <p>A merged schema export wizard has been added. This allows you to export OWL for the schema (as opposed to a profile) to a file in the workspace, which will then be maintained up-to-date- by the build system, or to a file in the filesystem. Only the direct rdfs:subClassOf axioms are included, as requested.</p> <p>Enumerated values in generated XSD have simple names (with no class prefix).</p> <p>When a range is added to a profile property it is no longer shown with label \"Unamed\". It is named after the schema class. (Range profiles are new feature that allow the range defined in the schema to be narrowed to a union of its subclasses.)</p> <p>A stereotype page has been added to the profile editor. Stereotypes can be added and removed from profile classes and properties. These are transmitted to the generated profile artifacts and can be used in custom profile generation rules. The list of available stereotypes is drawn from the UML and from a stereotype definition file and from a built-in list.</p> <p>The By Reference and Concrete flags are now represented as stereotypes and can be assigned on the stereotype page. By Reference flags in old profiles are automatically converted to stereotypes upon editing.</p> <p>The concrete flag was formerly computed and is now a manually assigned stereotype. However, the concrete stereotype can be compute for all classes in the profile by the new \"Repair and Reorganise\" wizard.</p> <p>A \"Repair and Reorganise\" wizard is available from the Summary page of the profile editor. This provides a check list of global profile transformations and will apply the selected ones in the appropriate order.</p> <p>The order is:</p> <ol> <li>Stereotype all properties as By Reference</li> <li>Stereotype leaf classes as Concrete</li> <li>Repair and remap profile to schema</li> <li>Reorganise profile per RDFS rules</li> </ol> <p>The remap operation is usefull if namespaces in the schema have been changed. It updates the profile to reference a new schema finding the best match for each class and property. It performs a number of other repairs as well.</p> <p>The reorganise operation we present before. Warning: RDFS rules are incompatible with the new property range profiles and these will be lost if this operation is performed.</p> <p>Changes 2008-02-15 CIM/XML validator passes the full test suite, available at http://files.cimtool.org/Validation-Cases-2008-02-15.zip</p> <p>Includes incremental CIM/XML validation.</p> <p>User interface improvements.</p> <p>Changes 2008-01-31 CIMTool has expanded namespace support described here: http://wiki.cimtool.org/CIMToolNamespaceSupport.html</p> <p>There is support for multiple extension model namespaces.</p> <p>Optionally, those namespaces can be carried through to profile artifacts (legacy-rdfs and simple-owl). This corresponds to the current practice on the ERCOT project.</p> <p>The pros and cons of the latter practice are discussed here: http://wiki.cimtool.org/Namespaces.html</p> <p>For a discussion of CIM extension model techniques using CIMTool see the UISOL Distributech presentation.</p> <p>The CIM/XML validation function has been further developed.</p> <p>Basic topology validation tests are now included and the profile conformance tests have been expanded.</p> <p>Memory footprint is down and speed is up. It is now possible to validate giant models such ERCOT in about the same time again it takes to parse their XML. That is about 5 minutes parse plus 5 minutes validation on my box. The models used for IOP testing only take seconds.</p> <p>A simplified user interface for validating models has been added. It is implemented as an eclipse 'perspective' with fixed layout and new views, actions and wizards for streamlining this task. From the menu select Window &gt; Show Perspective &gt; Validation.</p> <p>A validation result browser has been implemented. This groups messages by class and property and is linked to the Project Model View.</p> <p>Repetitive validation messages involving with the same description and the same class or property are now suppressed by default. This behaviour is controlled by a preference. Check Window &gt; Preferences &gt; CIMTool &gt; Limit validation output.</p> <p>The validation rule language has been improved and simplified. It is still rather technical to write these rules, but this is a step towards practical per-project validation rules.</p> <p>Changes in the profile editor have been made.</p> <p>A simplification has been made in the logic for detecting a concrete class. This affects XML schema generation.</p> <p>Note that ''concrete'' classes are rendered in XML Schema as top level elements while other classes become complexTypes. A class is concrete if it is not ''nested'' in another class anywhere in the profile except with the ''by reference'' flag.</p> <p>This change has the potential to change the XML Schema generated from existing profiles where a class was used both by reference and not in the same profile. That is an unlikely scenario.</p> <p>The icon for a ''by reference'' association has been changed to an arrow. The icon for a ''nested'' association is a class box.</p> <p>The ''Reorganize Profile'' function (found on the Summary tab) now has an option to convert all associations to ''by reference''. This is mainly useful for CIM/XML profiles where that as the correct way to model associations.</p> <p>The ''Remap Profile'' has been temporarily withdrawn. A more reliable way to adjust a profile when the information model namespace(s) change is being developed.</p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/","title":"Development Environment Setup","text":"<p>If you are looking to make an enhancement or fix a defect in CIMTool itself, these instructions help you get setup with a development environment to work on CIMTool as a developer. Users of CIMTool generally don't need to be concerned with these details.</p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#part-1-eclipse-installation","title":"Part 1:  Eclipse Installation","text":"<p>The following steps describe how to locate, install and setup Eclipse plug-ins development environment (PDE).</p> <p>Info</p> <p>A special edition of the Eclipse plug-ins development environment (PDE) is required to develop CIMTool.  This environment is known as the Eclipse for RCP and RAP Developers package (the newer 4.x PDE package is referred to as the Eclipse Committers package).  Since CIMTool is currently built on the older Eclipse 3.x SWT plug-ins platform this older version is required.</p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-1-download-eclipse-pde","title":"Step 1: Download Eclipse PDE","text":"<p>The Windows 64-bit version of Eclipse PDE 3.7.2 (Indigo) can be downloaded at eclipse-rcp-indigo-SR2-win32-x86_64.zip. (Note that versions for Mac and Linux are also available at Eclipse for RCP and RAP Developers but the instructions that follow are for Windows only.)</p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-2-install-java","title":"Step 2: Install Java","text":"<p>Though the CIMTool plug-ins themselves are configured and compiled for a later version of Java, the Eclipse PDE 3.7.2 (Indigo) development environment itself requires Java 1.5. If you do not have this older version of the JRE or JDK on your system you should locate and install it before moving on to the next step.  Currently, Oracle's Java Archives page links to the Java Development Kit 5.0 Update 22 Windows 64-bit release (i.e. the <code>jdk-1_5_0_22-windows-amd64.exe</code> installer). Note that you will need to accept Oracle's license agreement and have a (free) Oracle account to do so.  Feel free to locate and install Java 1.5 from an alternate provider if desired.</p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-3-extract-eclipse-pde","title":"Step 3: Extract Eclipse PDE","text":"<p>The installation process for the Eclipse environment is straightforward in that it involves simply extracting the eclipse-rcp-indigo-SR2-win32-x86_64.zip archive downloaded in Step 1.  It should be noted that depending on where you choose to extract the archive on Windows, the process may fail due to path names being too long. If this occurs it is suggested you create a temp directory off of the root of one of your local drives (e.g. <code>C:\\temp-indigo</code>) and extract the ZIP archive into that folder. The shorter base path should prevent \"path too long\" errors while extracting the archive. A folder called <code>\\eclipse</code> will be created under the selected extract directory and will contain your eclipse environment. Feel free to relocate this new folder to a location on the file system where you prefer to host your Eclipse plug-ins development environment.</p> Dealing with newer Java versions <p>If an attempt is made to launch the development environment directly via the <code>eclipse.exe</code> executable, the system default JRE/JDK is used and if this is a newer version of Java (e.g. Java 11) you will see a dialog similar to the following:</p> <p></p> <p>To resolve this, create a shortcut to the <code>eclipse.exe</code> that explicitly specifies the JRE/JDK to be used.</p> <ul> <li>Create the shortcut by performing a right mouse click on the <code>eclipse.exe</code> executable and selecting <code>Create shortcut</code></li> <li>Next, right mouse click on the new shortcut and select <code>Properties</code>.  In the Target text field shown below specify a launch configuration consistent with your system's installation.  The field below (though not fully visible) contains an example launch configuration illustrating the use of the <code>-vm</code> option to specify the JRE/JDK Eclipse should use at startup:</li> </ul> <p><code>C:\\eclipse-committers-3.7.2\\eclipse.exe -vm \"C:\\Program Files\\Java\\jdk1.5.0_22\\bin\\javaw.exe\"</code></p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#part-2-installupdate-additional-plugin-dependencies","title":"Part 2:  Install/Update Additional Plugin Dependencies","text":"<p>There are two additional plugin dependencies needed by CIMTool that are not pre-packaged with the Eclipse 3.7.2 Plugin Development Environment. These dependencies must be installed prior to importing the CIMTool project in Part 3 of these instructions. In addition, an update of the EGit plugin bundled with Eclipse is required if using EGit rather than external Git tooling to manage code changes in Git.</p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#install-eclipse-emf-260-orgeclipseemf-plugin","title":"Install: Eclipse EMF 2.6.0 (org.eclipse.emf) Plugin","text":"<p>The installation of this plugin is performed manually using the steps as outlined. Be sure that your instance of Eclipse is shut down before performing the installation.</p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-1-download-eclipse-emf","title":"Step 1: Download Eclipse EMF","text":"<p>Download the Eclipse EMF (Core) 2.6.0 Plugin and temporarily copy it to a local directory.</p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-2-locate-dropins","title":"Step 2: Locate <code>\\dropins</code>","text":"<p>Locate the <code>\\dropins</code> directory as illustrated in the screenshot below and drop the plugin jar into it.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-3-verify-installation","title":"Step 3: Verify Installation","text":"<p>Last, launch Eclipse and verify that the plug-in was properly installed.  It should appear within the Plug-ins tab as shown.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#install-scalaide-300-plugin","title":"Install: ScalaIDE 3.0.0 Plugin","text":"<p>An older version of the Scala-IDE plugin (located at the ScalaIDE for Eclipse Archive site). The installation steps are:</p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-1-download-scala-ide-plugin","title":"Step 1: Download Scala-IDE Plugin","text":"<p>Download the update-site.zip file and extract it to a local directory on your file system.  The directory structure after extraction should look like:</p> <pre><code>|\nsite (root directory)\n    |\n    features (directory containing the scala-ide features .jar files)\n    |\n    plugins (directory containing the scala-ide plug-ins .jar files)\n    |\n    artifacts.jar\n    content.jar (this is the archive file that will be selected in a later step)\n</code></pre>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-2-install-in-eclipse","title":"Step 2: Install in Eclipse","text":"<p>Next launch Eclipse and select the \"Install New Software...\" menu option as shown in the screenshot.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-3-add-repository-dialog","title":"Step 3: Add Repository Dialog","text":"<p>In the Install wizard dialog that is launched click \"Add...\" to launch the Add Repository dialog.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-4-select-local-update-sitezip","title":"Step 4: Select Local update-site.zip","text":"<p>In the Add Repository dialog click \"Local...\" button:</p> <p></p> <p>Using the file chooser navigate to the location  where the update-site.zip archive was extracted to and select the <code>\\site</code> directory and click \"OK\".</p> <p></p> <p>Finally, enter a name for this new local plugin repository in the Name field.  Note that the Location field should now reference the <code>\\site</code> directory you just selected (i.e. the \"root\" of the file structure described in step 1):</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-5-select-items-to-install","title":"Step 5: Select Items to Install","text":"<p>Next, select the check boxes as shown in the details sections of the screen shot below. Once selected click the \"Select All\" button and then \"Next\" to proceed to the next page of the installation wizard.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-6-install-details","title":"Step 6: Install Details","text":"<p>Continue by clicking \"Next\" to accept the items to be installed.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-7-accept-license","title":"Step 7: Accept License","text":"<p>On the Review Licenses page select the \"I accept the terms of the license agreements\" radio button and click the \"Finish\" button.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-8-accept-unsigned-content-warning","title":"Step 8: Accept Unsigned Content Warning","text":"<p>A security warning will be displayed.  Just click \"OK\" to continue.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-9-restart","title":"Step 9: Restart","text":"<p>If all was successful a final dialog is displayed asking if you want to restart in order for the plug-ins to take affect.  Click the \"Restart Now\" button and allow your instance of Eclipse to restart.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#update-eclipse-egit-plugin","title":"Update: Eclipse EGit Plugin","text":"<p>The 3.7.2 (Indigo) version of Eclipse outlined within these instructions is bundled with an older version of the EGit plugin.  In view of this it is recommended that either a newer version of EGit be installed or that external Git tooling such as Git Desktop, TortoiseGit, or Git Bash be used for source code management.</p> <p>From the Eclipse Foundation wiki site the EGit version support matrix outlines the following as the latest possible version of EGit support within Eclipse 3.7.2 (See:  what versions of Eclipse does EGit target):</p> EGit Contained in release train Supported Version of Eclipse 2.3.1.201302201838-r 3.8.2/4.2.2 (Juno SR2) Eclipse 3.7.2+ (Indigo) (except EGit Import Support feature, which is optional) <p>Then from the Where can I find older releases of EGit? section of the wiki we locate the p2 repository URL to be used during update:</p> Release Version Release Date p2 repository URL browse p2 repository download p2 repository 2.3.1.201302201838-r 2013-03-01 https://archive.eclipse.org/egit/updates-2.3 updates-2.3 2.3.1.201302201838-r"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#steps-to-install-the-egit-plugin-update","title":"Steps to Install the EGit Plugin Update","text":""},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-1-install-new-software-menu","title":"Step 1: Install New Software Menu","text":"<p>Again navigate to the \"Install New Software...\" menu option as shown.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-2-open-repository-dialog","title":"Step 2: Open Repository Dialog","text":"<p>In the Install wizard dialog that is launched click \"Add...\" to launch the Add Repository dialog.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-3-add-respository","title":"Step 3: Add Respository","text":"<p>In the Add Repository dialog simply add the description and the p2 repository URL (previously located) into the fields as shown and select the OK button.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-4-select-checkboxes","title":"Step 4: Select Checkboxes","text":"<p>Next, select the checkboxes as shown in the screenshot.  Once selected click the  Next button to proceed to the next page of the installation wizard.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-5-accept-install-items","title":"Step 5: Accept Install Items","text":"<p>Continue by clicking Next to accept the items to be installed.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-6-accept-license","title":"Step 6: Accept License","text":"<p>On the Review Licenses page select the \"I accept the terms of the license agreements\" radio button and click the Finish button.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-7-accept-unsigned-content-warning","title":"Step 7: Accept Unsigned Content Warning","text":"<p>If a security warning is displayed.  Just click OK to continue.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-8-restart","title":"Step 8: Restart","text":"<p>If all was successful a final dialog is displayed asking if you want to restart in order for the plug-ins to take affect.  Click the \"Restart Now\" button and allow your instance of Eclipse to restart.</p> <p></p> <p>Note</p> <p>On rare occasion, it has been observed that during installation of the EGit plugin update that at Steps 6 or Step 7 an error may occur indicating that Eclipse was unable to download specific jar artifacts as part of the installation.  If this occurs simply shutdown and restart Eclipse and perform the installation steps once again.  This typically will resolve any issues.  </p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#part-3-clone-and-import-of-the-cimtool-project","title":"Part 3:  Clone and Import of the CIMTool Project","text":"<p>The final steps needed to complete the setup of the CIMTool Eclipse Development Environment is to clone an appropriate development branch of the CIMTool codebase from the CIMTool GitHub Repo.  There are two general approaches to clone a branch for use in Eclipse with the second being the one outlined in the steps that follow: - Utilizing external tooling such as GitHub Desktop, TortoiseGit, Git Bash, Git GUI, etc. a clone is performed to a local directory.  In this scenario the projects in that directory are subsequently imported into an Eclipse workspace. - Alternatively, Eclipse's pre-bundled EGit plugin can be used to directly clone and automatically import the CIMTool projects in Eclipse.</p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#cloning-a-cimtool-branch-using-the-eclipse-egit-plugin","title":"Cloning a CIMTool Branch Using the Eclipse EGit Plugin","text":""},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-1-open-egit","title":"Step 1: Open EGit","text":"<ul> <li>Start out by opening the EGit Perspective in Eclipse.</li> </ul> <ul> <li>Then select the \"Git Repository Exploring\" Perspective.</li> </ul>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-2-select-clone-option","title":"Step 2: Select Clone Option","text":"<p>Select the \"Clone a Git repository\" option as shown.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-3-select-repository-location","title":"Step 3: Select Repository Location","text":"<p>Depending on your local Git installation you may or may not be shown the \"Check Home Directory\" dialog.  If this dialog appears you may choose to either update the HOME environment variable and return to the previous Step 2 or you can simply check the \"Do not show again\" checkbox and click the OK button to accept the default Git repository location.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-4-copy-cimtool-url","title":"Step 4: Copy CIMTool URL","text":"<p>Next, in a browser locate the CIMTool GitHub Open Source Site and copy the URL of the CIMTool repository to the clipboard as shown in the screenshot below.  Note that this will then be used in the \"Clone Git Repository\" dialog.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-5-paste-cimtool-url","title":"Step 5: Paste CIMTool URL","text":"<p>Paste the copied URL into the URI field as shown next.  Doing so will then auto-populate the Host and Repository Path fields on the wizard page.  At this point you must select the Protocol which can be either <code>https</code> or <code>git</code> depending on preference. Then click the Next button.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-6-select-branches","title":"Step 6: Select Branches","text":"<p>The next page of the \"Clone Git Repository\" dialog wizard will be displayed asking for you to select the branches to clone from the remote repository.  You can choose to select any number or even all branches that you may be interested in and click Next.  In this example screenshot all are selected.  </p> <p>Note</p> <p>It should be noted that if you select all branches they will be made available to you later in EGit should you desire to switch to another development branch .  It is important to keep in mind that if you decide to switch to a different branch in EGit that any code changes in the branch on your local file system will be lost unless they are first stashed/shelved before switching to another branch. Stashed changes can later be reapplied when switching back to the original branch on your local file system. See EGit Stash Support introduced in 2.0 of the plugin.  To utilize this functionality the EGit plugin update must be installed as outlined under the Part 2: Install Additional Plugin Dependencies section these instructions.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-7-select-initial-branch","title":"Step 7: Select Initial Branch","text":"<p>On the final page of the dialog wizard you should select from the Initial branch drop down the specific branch you want to clone.  In this example the \"release-1.10.0.RC2\" branch has been selected.  Note that the branch can be changed later to one of the other branches that was included in the checked list but for now choose .   </p> <p>Finally, be sure on this wizard page to check the \"Import all existing projects after clone finishes\" and click the \"Finish\" button.</p> <p></p>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-8-switch-to-plug-in-development","title":"Step 8: Switch to \"Plug-in Development\"","text":"<p>After completion of the cloning and auto-import of the CIMTool projects switch to the \"Plug-in Development\" perspective.  If there are no errors/problems to address then the Projects listed should appear similar to the next screenshot and the \"Problems\" tab indicate no errors.  </p> <p>If errors/problems do exist as illustrated in the second screenshot then continue on with Step 9 &amp; 10 of this procedure.</p> <ul> <li> <p>Successful import </p> </li> <li> <p>Import with errors </p> </li> </ul>"},{"location":"developers/dev-env-setup-cimtool-1.x.x/#step-9-fix-any-auto-import-errors","title":"Step 9: Fix Any Auto-Import Errors","text":"<p>A common error after auto-import of the projects is the lack of a JDK/JRE matching that configured for the CIMTool plugin projects (currently a Java 6 JDK/JRE is needed).  </p> <p>Note</p> <p>Note that a wide variety of versions of the OpenJDK starting with Java 6 can be download from the Azul download site.  The <code>.msi</code> installer for 64-bit Windows of the Zulu build of OpenJDK Java 6 is located here.</p> <p>Such errors will always be present when importing CIMTool projects into a new Eclipse workspace.  If importing into an existing workspace that previously had Java 6 added as an Installed JDK/JRE then these errors will not appear in the projects.</p> <p>If it is necessary to add the JDK/JRE, perform the steps that follow to select a JDK/JRE from those installed on the local file system.  These steps assume that you already have an existing Java 6 JDK/JRE installed or have downloaded and installed it from the link previously provided above.  Once installed and the Java 6 JDK/JRE selected here the remaining errors should be resolved after performing a \"clean all projects\" in Eclipse.</p> <ul> <li>First, from the Eclipse \"Preferences\" dialog select the Add button.</li> </ul> <p></p> <ul> <li>Next, select the \"Standard VM\" JRE Types and click the \"Next\" button.</li> </ul> <p></p> <ul> <li>Next, select the \"Directory...\" button and choose a JDK/JRE home directory on the file system corresponding to the version of the JDK/JRE desired.  Note that once selected the other fields in the dialog will auto-populate.  Just click the \"Finish\" button to add the JDK/JRE.  Once finished execute a \"Clean all projects\" from within Eclipse.</li> </ul> <p></p> <ul> <li>Verify whether or not all errors have been removed from the projects or if a reduced set remains.  If errors remain an observation has been that they are commonly related to the Scala libraries as shown in the next screenshot.  </li> </ul> <p></p> <ul> <li>Scala-related errors at this stage usually indicate that the steps outlined in the \"Installation of the ScalaIDE 3.0.0 Plugin\" section within the \"Part 2: Install Additional Plugin Dependencies\" of these instructions either has not yet been applied or may need to be performed again if the earlier steps were not accurately followed.</li> </ul> <p>Once the steps have been (re)applied the remaining errors should then be resolved:</p> <p></p>"},{"location":"developers/dev-env-setup/","title":"Development Environment Setup","text":"<p>If you are interested in contributing as a developer to the CIMTool project, the following instructions will assist you in the setup of a development environment for the CIMTool 2.x.x release line.  Active development on the CIMTool 1.x.x release line has ceased but instructions for developent environment setup for the older release line can be located here</p>"},{"location":"developers/dev-env-setup/#part-1-eclipse-installation","title":"Part 1:  Eclipse Installation","text":"<p>The following steps describe how to locate, install and setup the appropriate Eclipse Integrated Development Environment (IDE).</p> <p>To eliminate unanticipated configuration and/or setup issues these instructions recommend a specific edition/release of the Eclipse Integrated Development Environment (IDE) for development in the CIMTool 2.x.x release line. Develoment and deployment of CIMTool with this release has been fully tested and ncecessary  plugin dependencies verified out-of-the-box. Please post any questions to the CIMTool 2.x.x Release Line - Development Community Discussion Board</p>"},{"location":"developers/dev-env-setup/#step-1-download-eclipse-ide-for-enterprise-java-and-web-developers","title":"Step 1: Download \"Eclipse IDE for Enterprise Java and Web Developers\"","text":"<p>Specifically, the \"Eclipse IDE for Enterprise Java and Web Developers\" release of the Eclipse IDE 2023-06 R Packages is recommended with the Windows 64-bit version available here. Note that versions for Mac and Linux are also available at this site but these instructions are specific to Windows.</p> <p></p>"},{"location":"developers/dev-env-setup/#step-2-install-java","title":"Step 2: Install Java","text":"<p>If you do not already have a newer version of Java (&gt;= Java 20) installed on your system it should be downloaded and installed before moving on to the next step. Azul has a great freely available Windows 64-bit option available at the Azul Zulu OpenJDK Downloads site. Installation is straightforward if using the <code>.msi</code> installer and installation instructions are available on Azul's site of needed.</p> <p></p>"},{"location":"developers/dev-env-setup/#step-3-extract-eclipse-ide","title":"Step 3: Extract Eclipse IDE","text":"<p>The installation process for the Eclipse IDE is straightforward in that it involves simply extracting the eclipse-jee-2023-06-R-win32-x86_64.zip archive downloaded in Step 1.  It should be noted that depending on where you choose to extract the archive on Windows, the process may fail due to path names being too long. If this occurs it is suggested you create a temp directory off of the root of one of your local drives (e.g. <code>C:\\temp-eclipse</code>) and extract the ZIP archive into that folder. The shorter base path should prevent \"path too long\" errors while extracting the archive. A folder called <code>\\eclipse</code> will be created under the selected extract directory and will contain your eclipse environment. Feel free to relocate this new folder to a location on the file system where you prefer to host your Eclipse IDE.</p>"},{"location":"developers/dev-env-setup/#step-4-set-new-installed-jre-within-the-eclipse-ide","title":"Step 4: Set New Installed JRE within the Eclipse IDE","text":"<p>If you downloaded and installed a newer version of Java in the previous Step 2 then you will need to add it to your new Eclipse IDE configuration before importing the CIMTool projects into your environment. </p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"developers/dev-env-setup/#part-2-clone-and-import-of-the-cimtool-project","title":"Part 2:  Clone and Import of the CIMTool Project","text":"<p>The final step needed to complete the setup of the CIMTool Eclipse IDE is to clone an appropriate development branch of the CIMTool codebase from the CIMTool GitHub Repo. Your options include:</p> <ul> <li> <p>Use external GitHub tools such as GitHub Desktop, TortoiseGit, GIT for Windows, etc. (for a comprehensive list visit here). When using an external Git client you will perform a clone to a local directory on your file system and then import the projects from the directory into Eclipse.</p> </li> <li> <p>Use Eclipse's pre-bundled Git plugin to clone and import the CIMTool projects directly from the CIMTool GitHub Repo.  The plugin can be configured from within the preferences dialog in CIMTool.</p> </li> </ul>"},{"location":"developers/package-deploy/","title":"Packaging &amp; Deployment Guide","text":"<p>These instructions are for developers and maintainers of CIMTool that need to package and distribute the binaries as an Eclipse Product. Most users of CIMTool don't need to be concerned with these details.</p> <p>Note</p> <p>It is important to highlight that the set of CIMTool plugins is not distributed from a plugins update site as with other Eclipse plugins.  Rather, CIMTool is packaged and deployed as an Eclipse Product.</p>"},{"location":"developers/package-deploy/#packaging-deploying-cimtool-as-an-eclipse-product","title":"Packaging &amp; Deploying CIMTool as an Eclipse Product","text":""},{"location":"developers/package-deploy/#step-1","title":"Step 1:","text":"<p>When preparing for a new release of CIMTool, if not already applied earlier in the development process, then all MANIFEST.MF files for all CIMTool plugin projects must be updated to reflect any updates to their versions since the last release.  Note that some projects may not have changed and consequently may not require a version update.</p> <p>Industry standard semantic versioning rules must to applied when determining the versions of both CIMTool plugin projects as well as for individual release version of the CIMTool Eclipse Product.  (Refer to Semantic Versioning 2.0.0 for further information).</p>"},{"location":"developers/package-deploy/#step-2","title":"Step 2:","text":"<p>From within Eclipse:</p> <ul> <li>Select the CIMToolProduct project and right mouse click and select the Export menu option as shown.</li> </ul> <p></p> <ul> <li>Next, select the Eclipse product export type and click Next.</li> </ul> <p></p>"},{"location":"developers/package-deploy/#step-3","title":"Step 3:","text":"<p>The Export dialog screen will appear.  An existing Eclipse product configuration file must be selected for export.</p> <ul> <li>To select a configuration click the \"Browse...\" button.</li> </ul> <p></p> <ul> <li>Select the existing production configuration as shown then click the OK button.</li> </ul> <p></p>"},{"location":"developers/package-deploy/#step-4","title":"Step 4:","text":"<p>The Export dialog provides two destination options for exporting the CIMTool Product.  Either option will work, however, if not exporting directly as an archive then additional manual steps are required to package CIMTool.  </p> <p>The configuration settings highlighted in the next screenshot are for exporting as an archive. A couple of items to highlight:</p> <ol> <li> <p>The Root directory field is required and specifies the name of the directory that will appear within the archive file and which will serve as the root directory when extracting. For the purposes of CIMTool a naming convention that includes the semantic version should be matched to that for the release being deployed:  <code>CIMTool-x.x.x</code> (e.g. CIMTool-2.1.0)</p> </li> <li> <p>The \"Synchronize before exporting\" option should be checked.</p> </li> <li> <p>The Archive file field allows for the selection (i.e. Browse...) of a directory to which to export the CIMTool Product ZIP archive. Note that the screenshot illustrates an example of the CIMTool project naming conventions for archive file names: <code>CIMTool-&lt;release-version&gt;-&lt;os&gt;.&lt;os-variant&gt;.&lt;architecture&gt;.zip</code></p> </li> </ol> <p>The x64 architecture is a backwards-compatible extension of x86. It provides a legacy 32-bit mode, which is identical to x86, and a new 64-bit mode.  The term \"x64\" has included both AMD 64 and Intel 64. The instruction sets are close to identical. As of today, the x86 architecture is no longer being supported for new releases of CIMTool.</p> OS Example Archive Name Comments Windows 64-bit CIMTool-2.0.0win32.win32.x86_64.zip For 64-bit Java (Windows 7, 8, 10, 11) Windows 32-bit CIMTool-2.0.0win32.win32.x86.zip For 32-bit windows or 64 bit windows running 32 bit Java. Linux CIMTool-2.0.0linux.gtk.x86_64.zip Linux 64-bit Mac OSX 64bit CIMTool-2.0.0macosx.cocoa.x86_64.zip Mac OSX 64-bit <p>Once the export settings have been entered click the Finish button.</p> <p></p>"},{"location":"developers/package-deploy/#step-5","title":"Step 5:","text":"<p>During export, the progress of the export will appear in the Eclipse status bar in the lower right hand corner.</p> <p></p>"},{"location":"developers/package-deploy/#step-6","title":"Step 6:","text":"<p>When completed the exported archive file is ready to be released. This should be done at the time release notes are created and dropping the <code>*.zip</code> archive onto the area in the release notes shown next.</p> <p></p>"},{"location":"further-learning/cim/","title":"CIM","text":"<p>The Common Information Model (CIM) can be overwhelming to newcomers. There is a large amount of technical jargon within CIM, the IEC numbering and versioning system, and also within the governing bodies that oversee CIM such as the CIM Users Group. This  page gives more context to some of this jargon and can be used as a reference as you navigate and learn CIM for yourself.</p>"},{"location":"further-learning/cim/#standards-mapping","title":"Standards Mapping","text":"<p>The CIM Users Group has a good summary of various CIM Standards and how they map to plain english descriptions. You can find it here.</p> <p>Below is also a helpful illustration of this mapping.</p> <p></p>"},{"location":"further-learning/protege-and-topbraid/","title":"Using CIMTool with Protege and Top Braid","text":"<p>CIMTool is interoperable with popular ontology editors. It has been tested with Protege 4 and TopBraid Composer 3.2. (Note that Protege 3.2 is not directly compatible).</p> <p>Both editors have similar internals to CIMTool. They use Apache Jena (to some extent) and are built in Java using the OSGI platform that underlies Eclipse. In fact, Top Braid is based on the Eclipse workbench and it is possible to install CIMTool in TopBraid and use them simultaneously on the same project.</p> <p>The main components of CIMTool that make this possible are the ontology header and proper representation of datatypes. All OWL ontologies produced by CIMTool are read correctly by the two editors tested. That includes the main profile files (<code>.owl</code>), the standalone profiles (<code>.simple-owl</code> and friends) and the merged schema (<code>.merged-owl</code>).</p> <p>This page contains some instructions for getting started with using these editors.</p>"},{"location":"further-learning/protege-and-topbraid/#rebuilding-your-owl-documents","title":"Rebuilding Your OWL Documents","text":"<p>When you open an existing project with CIMTool none of the OWL files are changed unless you cause them to be changed. This is a design decision to prevent unexpected side effects. Before using these files with an ontology editor you need to rebuild them. Either:</p> <ul> <li>Create a new CIMTool project an import the XMI schema and profiles from an old project. (Be careful to get the namespace of the schema right!).</li> <li>Rebuild a specific profile and its dependent artifacts. Open the profile in the profile editor, make a change, and save it.</li> </ul> <p>Then rebuild (or create) an OWL version of the CIM UML, delete the <code>schema.merged-owl</code> file (if present) and use the export wizard to rebuild it. From the menu: File &gt; Export &gt; CIMTool &gt; Export merged schema. You can accept the defaults in this wizard.</p> <p>CIMTool often uses anonymous classes to represent the type of a property, as restricted in a profile. Such classes in an existing profile are not always recognised properly by the ontology editors (they may be interpreted as individuals). Newly created definitions include more context and are properly recognised.</p> <p>You may not want to recreate these classes in a large profile just so they appear properly in the ontology editor. Instead, if your profile is intended for CIM/XML (RDF) usage, you can reorganize it. First make a copy. Then, in the profile editor summary tab, click Reorganise and Remap &gt; Reorganise per RDFS rules.</p>"},{"location":"further-learning/protege-and-topbraid/#protege","title":"Protege","text":"<p>Download Protege. You need version 4 or higher for use with CIMTool.</p> <p>Once installed and running you view an ontology by selecting \"Open OWL Ontology\" and navigating to the folder containing your CIMTool project. You can choose any OWL file (ie <code>.owl</code>,<code>.simple-owl</code> and friends, or <code>.merged-owl</code>).</p> <p>When you open a <code>.owl</code> file you may want to see the definitions from the CIM UML together with the profile. (The <code>.owl</code> files are not self-contained, they add definitions to the CIM UML.)</p> <ul> <li>Ensure that the schema.merged-owl file exists or create it with the export wizard.</li> <li>From the menu open the libraries list: File &gt; Ontology Libraries...</li> <li>Add the CIMTool project folder to the list.</li> </ul> <p>Protege will then locate the CIM OWL file based on the import definition in the profile.</p>"},{"location":"further-learning/protege-and-topbraid/#topbraid-composer","title":"TopBraid Composer","text":"<p>Download TopBraid. You may want to try the free edition.</p> <p>TopBraid uses the familiar Eclipse workbench and its workspaces and projects to organise its files. Once installed and running you can create a project and import OWL files from your CIMTool project.</p> <ul> <li>Use File &gt; Import &gt; Filesystem and navigate to your CIMTool project and select the files of interest.</li> <li>Rename the imported files to have a .owl extension so that TopBraid will recognise their type.</li> </ul> <p>As with mentioned above, when you view a <code>.owl</code> file you may want the corresponding CIM schema. In TopBraid, it is only necessary for the referenced schema to be present in the project to be found.</p>"},{"location":"further-learning/uml-xmi-owl/","title":"UML, XMI, and OWL","text":"<p>UML is the Unified Modelling Language, XMI is XML Metadata Interchange language and OWL is Web Ontology Language.</p> <p>CIMTool translates XMI to OWL by first extracting UML information, then creating analogous OWL definitions. This works because we are only concerned with the class diagrams in UML and then only with their structure, not their visual layout.</p> <p>The analogy between UML and OWL is close, especially in the fundamental concepts of classes and associations (properties in OWL).</p> <p>UML is normally read as describing a program or software. But in the CIM community the class diagrams are used as a kind of enhanced entity-relationship notation. In other words, CIM UML is defining a data model not a program. This is something that translates very well to OWL.</p> <p>In programming, a class is a sort of template for a family of objects. In data modelling, and in OWL, a class is generally treated as a mathematical set. The set is called the class extension, its members instances. The class also has an intention, or purpose.</p>"},{"location":"further-learning/uml-xmi-owl/#how-cimtool-reads-xmi","title":"How CIMTool Reads XMI","text":"<p>With great difficulty! The reason is best summed up in this quote from the UML Forum FAQ:</p> <p>While the XML (XML Metadata Interchange) standard purports to facilitate the interchange of UML models, it has been largely ineffective in practice.There are at least two technical reasons for this. First and foremost, XMI attempts to solve a technical problem far more difficult than exchanging UML models; it attempts to provide a mechanism for facilitating the exchange of any language defined by the OMG's Metamodel Object Facility. Secondly, the UML 2.x Diagram Interchange specification lacks sufficient detail to facilitate reliable interchange of UML 2.x notations between modeling tools. Since UML is a visual modeling language, this shortcoming is a showstopper for many modelers who don't want to redraw their diagrams....</p> <p>The CIMTool strategy is to glean UML from the XMI. An XML parser recognises constructs of interest while ignoring surrounding syntax. The parser has been expanded over time to recognise more and more constructs that appear in different XMI dialects.</p> <p>When a construct is recognised, corresponding statements are inserted into an OWL/RDF model. The XMI id's (rather than the human readable, modelling names) are used to link up scraps of UML gleaned from different parts of the XMI document.</p> <p>A translation phase then renames each XMI id for the modelling name and assigns a namespace. In other words, the URI reference is constructed for each class and property.</p> <p>Finally, stereotypes are analysed and the OWL rendering of the definitions is adjusted as necessary. Some of these stereotypes have conventional meanings in the CIM community. For example, an enumeration stereotype causes the attributes of a UML class to be re-interpreted as enumeration values.</p>"},{"location":"further-learning/uml-xmi-owl/#uml-to-owl-translation","title":"UML to OWL Translation","text":"<p>In summary, UML concepts are translated to OWL as follows:</p> <ul> <li>A UML class translates as an OWL Class.</li> <li>A UML association translates as two ObjectProperty's in OWL, each the inverse of another. In other words, an association end or role translates as a single an ObjectProperty.</li> <li>A UML enumeration translates to either an OWL Class plus individuals or and OWL Class enumerated by a oneOf definition. The former creates an open set that can be extended. The latter a closed set.</li> <li>A UML Stereotype translates an instance of OWL class uml:Stereotype. Stereotypes are assigned to classes and properties with an OWL AnnotationProperty, uml:hasStereotype. The uml: namespace here is not part of any standard. It has the URI: http://langdale.com.au/2005/UML#</li> <li>A UML Tag translates to a similarly named OWL AnnotationProperty in the uml: namespace.</li> </ul>"},{"location":"further-learning/uml-xmi-owl/#cimtool-iconography","title":"CIMTool Iconography","text":"<p>CIMTool presents the OWL model with UML-like icons.</p> Icon UML OWL Note Class Class In UML a class is a definition for a family of objects. In OWL, it is a set of resources Specializes subClassOf READ: rhs is a subclass of lhs Generalizes inverse subClassOf READ: rhs is a superclass of lhs Association ObjectProperty An unrestricted property. Unidirectional Association FunctionalProperty A single-valued property. Unidirectional Association (reversed) InverseFunctionalProperty A property whose inverse is single-valued. Aggregation ObjectProperty with annotation A custom annotation property uml:hasStereotype with value uml:aggregateOf is attached to the property definition. Composition ObjectProperty with annotation As above, but the annotation value is uml:compositeOf. <p>Note</p> <p>The association symbols towards the bottom of the table take precedence when more than one applies.</p> <p>Sometimes the analogy between UML and OWL is strained. A unidirectional association in UML is not necessarily single-valued, but we have used the unidirectional symbol for OWL functional properties. The symbol somehow seems appropriate.</p> <p>There is nothing in OWL corresponding to the UML concepts of aggregation and composition. These concepts are somewhat qualitatively defined in UML references. See, for example, the Wikipedia entry describing aggregation and composition. We choose to represent these qualities in OWL with the custom annotations described above.</p>"},{"location":"how-to/associations-anonymous-classes/","title":"Associations and Anonymous Classes","text":"<p>This section explains how to profile associations including how to define anonymous classes for the object of an association. Let's begin.</p>"},{"location":"how-to/associations-anonymous-classes/#adding-the-association","title":"Adding the Association","text":"<p>Select the class in the profile outline.</p> <p></p> <p>The Add/Remove page shows the available attributes and associations. Select an association (e.g. EnergyConsumer) in the right hand panel.</p> <p></p> <p>Click the left arrow  to move it left thus adding it to the profile.</p> <p></p>"},{"location":"how-to/associations-anonymous-classes/#restrict-the-association","title":"Restrict the Association","text":"<p>Double click the newly added EnergyConsumer association (or just select in in the outline) and switch to the Restriction page.</p> <p></p> <p>Now:</p> <ul> <li>Click the By Reference checkbox if the object of the association will be external to the instance message or document and thus outside the scope of the profile.</li> <li>Set the Min and Max cardinalities either with explicit numbers or using the checkboxes.</li> <li>Choose a class as the object of the association from among the compatible classes already defined in this profile. In this example, ConformLoad (a concrete class) and its base class EnergyConsumer are available.</li> </ul> <p>But, what if the desired class is not yet defined in the profile?</p>"},{"location":"how-to/associations-anonymous-classes/#adding-a-new-class-for-the-association","title":"Adding a New Class for the Association","text":"<p>Switch to the Add/Remove page and all of the compatible classes for the EnergyConsumer association in the CIM are shown in the right pane. For this example we highlighted NonConformLoad which was one of the classes not yet in the profile.</p> <p></p> <p>Clicking the left arrow now does two things: it adds NonConformLoad to the profile (if it does not immediately appear in the outline then click save).</p> <p>Also, the newly added class becomes the object of the EnergyConsumer association, which can be seen on the Restriction page.</p>"},{"location":"how-to/browsing-the-CIM-UML/","title":"Browsing the CIM UML","text":"<p>CIMTool provides a special window layout for browsing the CIM UML. This is sometimes more convenient than a standard UML editor such as Enerprise Architect, especially if the UML diagrams are not complete.</p> <p>In particular, CIMTool provides efficient ways to search the CIM UML and to follow class associations through the CIM.</p> <p>If this is the first time you have used CIMTool you will need to create a project or load an existing project. See Create a Project for details on how to do this.</p> <p>With a project loaded, open the browsing window. From the main menu choose: Window &gt; Open Perspective &gt; CIMTool &gt; Browsing</p> <p>The browsing window will look like this:</p> <p></p> <p>The Project Explorer (top left) shows the available projects and their contents. For CIM UML browsing it is only necessary to select the project (as each project has one copy of the CIM UML). The first time a project is selected its copy of the CIM UML is analysed in the background. This takes a couple of seconds.</p> <p>The Project Model (top right) displays the CIM UML package structure. Packages, classes and their members can be explored by expanding this tree view.</p> <p>For an explanation of CIMTool's interpretation of the CIM UML and the icons used in this view see UML, UMI, OWL for further details.</p> <p>Selecting an item causes its details to be displayed in the Property View (bottom left) and the Documentation View (bottom right).</p> <p>The Jump and Search buttons provide addition navigation options. They are located above the project model view:</p>"},{"location":"how-to/cimtool-support-for-extension-namespaces/","title":"CIMTool Support for Extension Namespaces","text":"<p>CIMTool can support multiple extension namespaces in the information model and in either of the profile namespace approaches described here: Profiles and Namespaces</p>"},{"location":"how-to/cimtool-support-for-extension-namespaces/#information-model-namespaces","title":"Information Model Namespaces","text":"<p>The information model is normally supplied to CIMTool as an UML/XMI file. Namespaces, in a general sense, are represented by packages and classes. To obtain URI namespaces something must be added.</p>"},{"location":"how-to/cimtool-support-for-extension-namespaces/#default-namespace","title":"Default Namespace","text":"<p>A default namespace is assigned to each XMI file at the time it is imported to CIMTool. This is specified via a field in the import wizard. The default namespace for each XMI file can be subsequently changed in the file properties dialog.</p> <p>The default namespace is used as follows:</p> <ul> <li> <p>OWL resources representing UML packages are always named in the the default namespace. </p> </li> <li> <p>OWL classes and properties representing UML classes, attributes and associations are named in the default namespace if no other namespace is specified. </p> </li> </ul>"},{"location":"how-to/cimtool-support-for-extension-namespaces/#uml-tag-baseuri","title":"UML Tag: baseuri","text":"<p>CIMTool recognises a UML Tag with name <code>baseuri</code> which is expected to have a namespace URI as its value. The <code>baseuri</code> tag can be attached to any package, class, association or attribute using the UML editor.  </p> <ul> <li> <p>When attached to a class, association or attribute, <code>baseuri</code> specifies the namespace of the resulting OWL class or properties. </p> </li> <li> <p>When attached to a package, <code>baseuri</code> specifies the namespace of all OWL classes and properties resulting from that package or its sub-packages recursively except where a sub-package, class, association or attribute has a <code>baseuri</code> tag. </p> </li> </ul> <p>Generally, it is sufficient to tag the top level packages in a UML model to obtain the correct namespaces throughout.</p> <p>An example of a Tag on a Class:</p> <p></p>"},{"location":"how-to/cimtool-support-for-extension-namespaces/#annotation-file","title":"Annotation File","text":"<p>CIMTool can obtain namespace information from a file accompanying the XMI file, called an annotation file. There is no editor or other GUI for managing namespace information in the annotation file. It is a stopgap intended for situations where the user does not control the XMI file and that file lacks <code>baseuri</code> tags.</p> <p>The annotation file should be placed in the project's Schema folder where the XMI file is located. It must have the same base name as the XMI file and extension .annotation instead of .xmi.</p> <p>The file can be edited with the eclipse text editor. (If an external text editor is used, the workspace must be manually refreshed afterwards.) </p> <p>An example file that can be used as a template can be found here: </p> <p>example.annotation.txt</p> <p>The file contains <code>baseuri</code> statements in the RDF TURTLE language. For example, the line:</p> <p><code>package:Extensions     uml:baseuri \"http://www.ucaiug.org/CIM100/2024/extension#\"</code> </p> <p>Has the same effect as attaching a <code>baseuri</code> tag to the Extensions package with the given URI as its value.</p> <p>Note</p> <p>The <code>baseuri</code> statements are merged with any <code>baseuri</code> tags in the xmi file.</p> <p>The effect of assigning two different <code>baseuri</code> values to the same package is undefined.</p> <p>Only packages can be given <code>baseuri</code> values via the annotation file.</p>"},{"location":"how-to/cimtool-support-for-extension-namespaces/#profile-namespaces","title":"Profile Namespaces","text":"<p>Each profile is assigned a namespace at the time the profile is created. There is a namespace field provided in the profile import wizard. The namespace can also be edited in the profile properties dialog. (This is obtained by right clicking on the profile definition in the project explorer.)</p> <p>The profile namespace policy determines how this value will be used. The policy is set on the CIMTool preferences page by the Preserve schema namespaces in profiles checkbox. (This is obtained from the main menu by selecting Window &gt; Preferences... &gt; CIMTool.)</p>"},{"location":"how-to/cimtool-support-for-extension-namespaces/#same-namespace-policy","title":"Same Namespace Policy","text":"<p>This policy is obtained when Preserve schema namespaces in profiles is selected. It is the default.</p> <ul> <li> <p>Each class and property defined in simple-owl and legacy-rdfs output will have the same namespace as the schema (ie information model) class or property it derives from. </p> </li> <li> <p>If these are the only outputs of interest then the profile namespace is not exposed and a default value can be accepted when the profile is created. </p> </li> </ul>"},{"location":"how-to/cimtool-support-for-extension-namespaces/#separate-namespace-policy","title":"Separate Namespace Policy","text":"<p>This policy is obtained when Preserve schema namespaces in profiles is not selected.</p> <ul> <li> <p>Each class and property defined in simple-owl and legacy-rdfs output will have the profile namespace. </p> </li> <li> <p>A meaningful value should be assigned when the profile is created. </p> </li> </ul>"},{"location":"how-to/cimtool-support-for-extension-namespaces/#common-behaviour","title":"Common Behaviour","text":"<p>The following behaviour is independent of the namespace policy:</p> <ul> <li> <p>XML Schema output will use the profile namespace as the target namespace. A meaningfull profile namespace should be selected if the aim is to generate XSD's. </p> </li> <li> <p>The profile namespace is also used for the abstract profile (or contextual model). This file (with extension .owl) is not normally an output but, internally, CIMTool relies on the profile namespace to keep the abstract profile separate from the information model. It is important to assign a profile namespace that is not used in the information model. </p> </li> </ul>"},{"location":"how-to/comparing-profiles-schemas/","title":"Comparing Profiles and Schemas","text":"<p>CIMTool can help you track changes in the CIM that affect your profiles and track changes between different versions of a profile.</p>"},{"location":"how-to/comparing-profiles-schemas/#comparing-schema-ie-cim-versions","title":"Comparing Schema (i.e. CIM) Versions","text":"<p>To compare two versions of the CIM they should be both present in the workspace. In other words, you must create two projects containing the respective CIM versions.</p> <ul> <li>In the Project Explorer, select the .xmi file containing the first version of the CIM. This is located in the Schema folder of the first project.</li> <li>Add the .xmi file for the second version of the CIM to the selection. That is, hold the Control Key and select the file in the Project Explorer. It is located in the schema folder of the second project.</li> <li>With both .xmi files selected, right click and in the context menu choose Compare with each other...</li> <li>The eclipse compare editor opens.</li> </ul>"},{"location":"how-to/comparing-profiles-schemas/#the-compare-editor","title":"The Compare Editor","text":"<p>The eclipse compare editor gives a structured view of the differences between two schemas or two profiles.</p> <ul> <li>The tree view in the top left pane shows the added, removed and changed elements.</li> <li>When a changed element is selected, the detail pane below shows the differences in that element.</li> </ul>"},{"location":"how-to/comparing-profiles-schemas/#comparing-profile-versions","title":"Comparing Profile Versions","text":"<p>To compare two profiles they should both be present in the workspace. They may be in the same project or different projects. As with schema comparisons, the two candidates must be selected:</p> <ul> <li>In the Project Explorer, select the .owl file representing the first profile and add the second .owl file to the selection (with Control-Select).</li> <li>Right click and in the context menu choose Compare with each other...</li> <li>The eclipse compare editor opens. Navigate the differences as described above.</li> </ul>"},{"location":"how-to/comparing-profiles-schemas/#quirks-and-caveats","title":"Quirks and Caveats","text":"<p>The Eclipse Modelling Framework (EMF) defines its own comparison editor for .xmi files. If this editor is installed in your version of eclipse you will be unable to use the CIMTool schema compare editor. Unfortunately, eclipse is prone to hanging in that case if a comparison of .xmi files is attempted.</p>"},{"location":"how-to/create-a-profile/","title":"Create a Contextual Profile","text":"<p>There are four ways to create a new Contextual Profile:</p> <ol> <li>Create it from scratch within CIMTool</li> <li>Import from previously saved (<code>.owl</code> file) using CIMTool</li> <li>Import the Contextual Profile from a data dictionary spreadsheet</li> <li>Copy and paste an existing Contextual Profile within CIMTool</li> </ol> <p>Once created, Contextual Profiles are stored in the \"Profiles\" folder of the project. A project may have many Contextual Profiles. Each Contextual Profiles will have a namespace. </p>"},{"location":"how-to/create-a-profile/#create-from-scratch","title":"Create from Scratch","text":"<p>To create a Contextual Profile from scratch.</p> <p>Select File -&gt; New -&gt; Other.</p>"},{"location":"how-to/create-a-project/","title":"Create a Project","text":"<p>To create a new project. Select File -&gt; New -&gt; CIMTool Project.</p> <p></p> <p>In the dialog box that appears, give it a name (e.g. 'MyProject') then click 'Next'. </p> <p></p> <p>In the next dialog box that appears. select whether or not you want to include copyrights within your auto-generated artifacts (e.g. XSD, RDFS, etc.). Here you can load your own custom copyright headers or use the default UCAIug Apache 2.0 copyright headers provided by CIMTool. If you do not require copyrights you can simply select 'Do not include copyrights'.</p> <p></p> <p>Here we have specified a project without copyrights for now. Click 'Next' or 'Finish' depending on whether you will be specifying a CIM schema for your project at this time. It is suggested, but not required, to specify your schema while creating your project by clicking 'Next'.</p> <p>Note:  it is possible to add copyrights later to your project via 'File -&gt; Import...'</p> <p></p> <p>Next in the Create New Project wizard you will be asked to specify an initial base schema. Click 'Browse...'</p> <p></p> <p>Select the source file you want to use as your schema.  This could be an <code>.xmi</code> file or a Sparx EA 15.x <code>.eap</code> or 16.x <code>.qea</code> project file for example. </p> <p></p> <p>Last you must declare the namespace URI to be associated with the CIM schema you chose in the previous step. At this point you can select one of the radio buttons to specify a predefined namespace or select the 'Preference' radio button to enter your own. Click the 'Finish' button. A new project folder is created in your CIMTool workspace.</p> <p></p>"},{"location":"how-to/edit-a-profile/","title":"Editing a Profile","text":"<p>In the navigator view, find the <code>.owl</code> file for the Contextual Profile you want to edit in the Profiles folder and right click. In the context menu choose \"Profile Editor\". The editor pane will show a blank Add/Remove page and the outline view will show a single root element.</p> <ul> <li>Editing is driven from the outline view. Select the root element there and the Add/Remove page will be populated, showing two panes. Add one or more classes to as top level definitions by selecting them in the right pane can clicking the '&lt;' button to move them to the left pane.</li> <li>Double click one of the newly added classes in the left pane. The outline view, project model view, and Add/Remove page will all update and focus on the selected class.</li> <li>Select attributes and associations of the class and click the '&lt;' button to add these to the profile.</li> <li>To produce profile artifacts, such as an XML schema, select the Summary tab and switch on the builder for XSD. Click the save button. As well as saving the profile definition to example.owl, the example.xsd file (in the same folder) will be generated. Open this file (ideally in the eclipse XML Schema editor) to see the results. The schema will update automatically every time the profile is saved.</li> </ul> <p>Tip</p> <p>Folders and files that have errors will have a red 'X' on their associated icon. If the add/remove page is blank, select a message element in the outline view on the right. Similarly, if the Project Model view is blank select a message element, or just select the project in the navigator view.  You can explore the information model in the project model view. Double click an association to navigate to its opposite end.  You can place more than one XMI file in the Schema folder are they will be merged. In the File menu choose Import|CIMTool Schema to add XMI files to a project.</p>"},{"location":"how-to/exchange-a-project/","title":"Exchange a Project","text":"<p>CIMTool projects can be shared with others.</p>"},{"location":"how-to/exchange-a-project/#exporting-to-a-zip-file","title":"Exporting to a Zip File","text":"<p>To send a project to someone else create a zip file as follows:</p> <ol> <li> <p>Choose File &gt; Export...</p> </li> <li> <p>Choose General &gt; Archive file and click Next.</p> </li> <li> <p>Check the projects you wish to include in the zip file on the left list.</p> </li> </ol> <p>Be careful not to uncheck any of their contents or sub-folders. The <code>.project</code> and <code>.cimtool-settings</code> files are required.</p> <ol> <li>Select a name and location for the zip file and click Finish.</li> </ol>"},{"location":"how-to/exchange-a-project/#importing-from-a-zip-file","title":"Importing from a Zip File","text":"<p>If you have received a zip file that was created from a CIMTool project, you can add it to your current workspace as follows:</p> <ol> <li> <p>Choose File &gt; Import...</p> </li> <li> <p>Choose General &gt; Existing Projects into Workspace and click Next. Don't choose the Archive file wizard here.</p> </li> <li> <p>Choose \"Select archive file\" and click Browse...</p> </li> <li> <p>Locate your zip file. There is no need for it to be unzipped, If it is named <code>.zipped</code> instead of <code>.zip</code> be sure to adjust the file type filter to <code>*.*</code></p> </li> <li> <p>The projects found in the zip file will now be listed. Check the ones you wish to add to the workspace and click Finish.</p> </li> </ol> <p>Tip: if a project in the zip file has the same name as an existing project in the workspace it cannot be imported. In that case the workspace project should be renamed before running the import wizard. Right click the project in the project explorer and choose Rename...</p>"},{"location":"how-to/exchange-a-project/#importing-from-another-workspace","title":"Importing from Another Workspace","text":"<p>To copy a project from one workspace to another:</p> <ol> <li> <p>Run CIMTool in the destination workspace and follow the import procedure.</p> </li> <li> <p>Instead of choosing an archive file select the source workspace directory as the \"root directory\". The wizard will list all the projects found under this directory.</p> </li> <li> <p>Complete the import procedure as usual.</p> </li> </ol> <p>There is no need to export the projects from the source workspace if it is directly accessible.</p> <p>Note</p> <p>It is not a good idea to exchange an entire workspace between different users or hosts. Workspace metadata is not generally portable. Use project import/export instead.</p>"},{"location":"how-to/generate-database-schema/","title":"Generating a Database Schema","text":"<p>CIMTool can generate a database schema based on a CIM Contextual Profile. Potential uses of this feature might include:</p> <ul> <li>Prototyping a CIM-based application, or</li> <li>Creating a staging store for CIM-based data</li> </ul> <p>Warning</p> <p>You could use a generated schema in a production application or product. However, remember that a new CIM UML version is released each year. The use of a profile provides some protection against CIM changes. In some cases, the profile can remain the same even though the underlying CIM changes. Even so, it may be difficult to prevent the churn in CIM versions from impacting the schema and the impact of that on the application as a whole may be unsustainable.</p>"},{"location":"how-to/generate-database-schema/#getting-started","title":"Getting Started","text":"<p>To generate SQL statements for a profile, select the \"SQL\" checkbox on the summary page in the profile editor. When the profile is saved, a file with the same name as the profile and extension <code>.sql</code> will be generated in the Profile folder of the project.</p>"},{"location":"how-to/generate-database-schema/#what-is-in-the-schema","title":"What is in the Schema","text":"<p>The generated schema closely follows the structure of the profile as seen the Outline view.</p> <ul> <li>Each ordinary class results in a table. <ul> <li>A primary key column called \"mRID\" is declared.</li> </ul> </li> <li>Each enumerated class results in a table<ul> <li>A primary key column called \"name\" is declared.</li> <li>A record is inserted for each enumerated value.</li> </ul> </li> <li>Each datatype property (UML attribute) results in a column.<ul> <li>The column type is selected on the basis of the XML Schema Part II datatype of the property.</li> <li>If the property is required (minimum cardinality of 1) the column is marked NOT NULL.</li> </ul> </li> <li>Each enumeration property (UML enumeration attribute) results in a column<ul> <li>A foreign key constraint is added such that the referenced table corresponds to the property type and the referenced column is \"name\".</li> <li>If the property is required (minimum cardinality of 1) the column is marked NOT NULL.</li> </ul> </li> <li>Each object property (UML association) results in a column<ul> <li>The maximum cardinality of the property must be 1 (many valued properties are ignored).</li> <li>A foreign key constraint is added such that the referenced table corresponds to the property type and the referenced column is \"mRID\".</li> <li>If the property is required (minimum cardinality of 1) the column is marked NOT NULL.</li> </ul> </li> <li>Each subclass relationship results in a foreign key constraint.<ul> <li>The foreign key is defined on the \"mRID\" column of the subclass table and references the \"mRID\" column of the superclass table.</li> </ul> </li> </ul>"},{"location":"how-to/generate-database-schema/#guidelines-for-profiles","title":"Guidelines for Profiles","text":"<p>There are a few guidelines that should be observed when constructing profiles for database schemas. They concern:</p> <ul> <li>Choice of Identifiers</li> <li>Profile Structure</li> </ul>"},{"location":"how-to/generate-database-schema/#choice-of-identifiers","title":"Choice of Identifiers","text":"<p>Database systems generally place a length limit on table and column names and these names are normally case-insensitive. CIM class, attribute and association role names are sometimes longer than the limit and are case sensitive.</p> <p>The identifiers in the profile are by default copied from the CIM, but can be changed on the detail page of the profile editor. In most cases, only one or two names need to be changed in the profile to comply with the database restrictions.</p>"},{"location":"how-to/generate-database-schema/#profile-structure","title":"Profile Structure","text":"<p>It is possible to create a profile with a property referencing a class outside the profile. A profile may also contain local (or nested) class definitions. In either case, the generated schema will contain an invalid foreign key constraint because the referenced table will not exist in the schema.</p> <p>The rule is that the type of each object property and each enumeration property must be a global class. Global classes are the named classes and appear at the first level of the profile outline display.</p> <p>The Reorganize and Repair tool can be used to enforce this rule. This tool is activated from the summary page of the profile editor. The \"Reorganize profile per RDFS rules\" option will introduce any global classes needed.</p> <p>Note</p> <p>This option makes other changes as well. It merges classes based on the same schema class into a single profile class. It also merges all restrictions of the same schema property into a single restriction. The merged restriction is moved to the common base class of the individual restrictions. If necessary that class is added to the profile.</p>"},{"location":"how-to/import-cim-uml/","title":"Using CIMTool with Enterprise Architect: Importing a CIM Schema","text":"<p>The CIM UML model is maintained within Sparx Systems UML design tool, Enterprise Architect (EA) as shown. </p> <p></p> <p>Before building a Contextual Profile in CIMTool you must first import a version of the CIM UML.  This step is typically done when creating a new CIMTool project. However, you can import additional custom UML schemas (i.e. additional schemas containing extensions to the CIM) and co-locate them alongside the base CIM UML schema in your project. CIMTool automatically processes such custom schemas by internally creating a union of them with the base CIM schema. Alternatively, an existing CIM UML schema can be replaced outright in a CIMTool project when a new version of the CIM is released.</p> <p>The CIM can be imported in one of two possible formats as described later on this page, but first you will need to locate a stable public release of the CIM UML model. For information on where visit our obtain CIM UML models page.</p>"},{"location":"how-to/import-cim-uml/#using-an-xmi-schema-file-in-cimtool","title":"Using an <code>.xmi</code> schema file in CIMTool","text":"<p>Enterprise Architect has an \"Export\" feature to export to the <code>.xmi</code> format. To use this, open the desired CIM UML version of the <code>.eap</code> or <code>.eapx</code> file (e.g. <code>iec61970cim17v38_iec61968cim13v13_iec62325cim03v17a.eap</code>) in Enterprise Architect. </p> <p>Note</p> <p>To export to <code>.xmi</code> the full (paid) version of Enterprise Architect is required. The Enterprise Architect Lite (free) version does not support this capability.</p> <p>In the top ribbon, select the Publish tab, then click Export-XML</p> <p></p> <p>You'll be presented with the next dialog.  Click the \"Other Formats:\" Publish button. </p> <p></p> <p>When the \"Publish Model Package\" dialog appears use the following export options highlighted in the screenshot below:</p> <ol> <li>The \"Package\" field is used to specify which package in the model hierarchy you wish to be exported. Specifying the root \"Model\" package as shown in the screenshot is most common.  However, if for exmaple your profiling work is focused exclusively on classes located hierarchically within the Grid (i.e. formerly IEC61970) package then selecting that as your Package will limit the scope of the packages to be exported and reduce the size of the <code>.xmi</code> file.</li> <li>Under \"General Options\" be sure that only the \"Format XML Output\" check box is selected. </li> <li>For the \"XML Type\" selection, choose the \"UML 1.4 (XMI 1.2)\" option.</li> <li>In the \"Filename\" field, select or enter the filename you want (save to location and name) for the XMI file you are exporting. Using a name that matches the the name of your <code>.eap</code> file is recommended as it helps identifying the version of the model the XMI export was for (e.g. <code>iec61970cim17v40_iec61968cim13v13_iec62325cim03v17a.xmi</code>)</li> </ol> <p>Finally, click the Export button.</p> <p>Note</p> <p>A couple of noteworthy items.</p> <p>Selecting the \"Export Diagrams\" option will include the UML diagrams in your exported <code>.xmi</code> file. This adds no real value for CIMTool but can be useful later if you do not have the original <code>.eap</code> project file. In this case the <code>.xmi</code> can be re-imported into Sparx EA and the UML class diagrams reconstituted along with the model.</p> <p>In the early years, CIM was maintained using IBM's Rational Rose UML modeling tool. In the late 2000s, when the CIM was first migrated to EA, XMI exchanges between the two products was necessary and the \"Unisys/Rose Format\" checkbox selected when sharing the CIM between the two products. Per EA's \"Model Exchange User Guide\":  With XMI, model details can be exchanged between different UML tools and other tools that are capable of using XMI. Limited support for export to Rational Rose is provided using the Rose version of the XMI 1.1 specification, as implemented by Unisys for Rational products.\" Note that today (as shown in the screenshot) the recommended <code>.xmi</code> export settings for CIMTool are \"UML 1.4 (XMI 1.2)\", making the \"Unisys/Rose Format\" checkbox irrelevant. Therefore, if you encounter older CIMTool documentation indicatating the need to check the \"Unisys/Rose Format\" checkbox it should be ignored.</p> <p></p>"},{"location":"how-to/import-cim-uml/#using-an-ea-project-file-in-cimtool","title":"Using an EA Project file in CIMTool","text":"<p>Exporting XMI can be slow. An alternative is to directly import an Enterprise Architect project file (<code>.eap</code>, <code>.feap</code>, <code>.qea</code>, etc.) into CIMTool. This eliminates the need to export anything from EA before importing to CIMTool.  </p> <p>Tip</p> <p>Beginning in release 16.x of Enterprise Architect <code>.eap</code> and <code>.eapx</code> files are only supported in the 32-bit version of EA 16.x. If using the 64-bit EA 16.x or later and using a release of CIMTool prior to 2.1.0 you will need to export your models as <code>.xmi</code> and import them into CIMTool to do your profiling. If using CIMTool 2.1.0 or later then EA 16.x 64-bit <code>.qea</code> or <code>.qeax</code> project files can be imported and used directly by CIMTool. For further information refer to EA's EAP/EAPX File to QEA File Format page for a better understanding of changes in EA 16.x.</p>"},{"location":"how-to/import-cim-uml/#file-format-considerations","title":"File Format Considerations","text":"<p>The following table highlights the various tradeoffs of utilizing one format over another:</p> Format Description Pros Cons <code>.eap</code> / <code>.eapx</code> Native EA project files. Standard in EA 15.x releases and earlier the internal format is based on MS Access. Specifically, <code>.eap</code> files are based on the Jet3.5 engine and <code>.eapx</code> on Jet4.0 (see Access Database Engine History) with both stored as binaries. The Jet database engine is available only in 32 bit configurations. Which means that the <code>.eap</code> and <code>.eapx</code> file formats are still supported in the 32 bit version of EA 16.x, but not in the new 64 bit version of Enterprise Architect 16.0. To keep using the data in an <code>.eap</code> or <code>.eapx</code> file in a 64 bit release of EA 16.x you must transfer the contents of the file to another project that the 64 bit version can access. This project can be a file (such as a <code>.qea</code> or Firebird file) or a database repository (such as a SQL Server or MySQL database). Refer to the Sparx article Migrate an EAP/EAPX File to QEA File Format for how to peform this. Both file formats can be imported directly into CIMTool without the overhead of having to export as an <code>.xmi</code> file. Multi-language support via unicode is available with an <code>.eapx</code> file. If hosting a CIMTool project on Github it is not recommended that an EA project file be used (see: About large files on GitHub and Git LFS). Instead the <code>.xmi</code> file format is recommended. The <code>.eap</code> file format does not support unicode and therefore is not ideal for profiles derived from CIM classes or attributes with descriptions and/or notes containing non-ASCII characters. NOTE: To convert an <code>.eap</code> file to an <code>.eapx</code> format see Use Languages Other Than English which has the link to the EABase JET4 file that can be used for this purpose. Visit the Project Data Transfers page for further information on this process. If choosing to migrate to Jet4 then EA must also be configured to use Jet4. Refer to the General Options page for details. <code>.feap</code> Native EA project file. The <code>.feap</code> project file type was introduced in the Sparx EA 10.x release in 2013. The <code>.feap</code> file is a compact, single-file database for smaller projects and is the only EA project file format that does not require conversion when opening in the newer 64-bit releases of EA 16.x or later. The internal format of these files is based on the Firebird SQL open source database and stored in binary form. This native EA project file format is supported starting with release 2.1.0 of CIMTool and can be imported directly without the overhead of having to export an <code>.xmi</code> file. <code>.qea</code> / <code>.qeax</code> Native EA project files. Introduced in the 64-bit release of EA 16.x, the internal format of these files is based on the SQLLite open source database and stored in binary form. Both file types support basic replication with the <code>.qeax</code> extension indicating that file sharing is enabled. A <code>.qeax</code> file can simply be renamed back to <code>.qea</code> to disable file sharing. These native EA project file formats are supported starting with release 2.1.0 of CIMTool and can be imported directly without the overhead of having to export an <code>.xmi</code> file. <code>.xmi</code> The XMI (XML Metadata Interchange) format is an Object Management Group (OMG) standard for exchanging metadata information via Extensible Markup Language (XML). Exporting the CIM as an <code>.xmi</code> schema file has added flexibility not available when using a native EA project file.  Specifically, a subset of the CIM can be exported by simply selecting a specific package for export. This approach can be used to reduce the size of the schema file in a CIMTool project. Given that profiles are commonly defined for a particular domain (e.g. Transmission, Distribution, Market-related profiles) just a subset of the CIM can be exported and used within CIMTool. This is more suitable when hosting a CIMTool project in Github.  CIMTool supports the ability to import multiple <code>.xmi</code> schema files and for a user to assign a distinct namespace to each. This is useful when defining and exporting custom extensions as a separate <code>.xmi</code> file that coexists alongside an <code>.xmi</code> for the CIM model. Exporting <code>.xmi</code> files can be time consuming and therefore inconvenient if quick iterative changes are needed to the CIM with a reimport into a CIMTool project. In this scenario it is suggested to use one of the native EA project files. The direct use of a project file eliminates the roundtrip time needed for the \"make changes to the UML, export to XMI, import XMI into CIMTool\" cycle. <p>Tip</p> <p>When attempting to load an <code>.eap(x)</code> CIM project file into a 64-bit release of EA 16.x you will be prompted with a dialog that will guide you through upgrading the file before continuing.</p>"},{"location":"how-to/import-cim-uml/#importing-a-schema-file-into-a-cimtool-project","title":"Importing a Schema File into a CIMTool Project","text":"<p>To import an <code>.xmi</code>, <code>.eap</code> or <code>.eapx</code> file into CIMTool, open the project you'd like to use the schema with and the navigation to the Select File -&gt; Import menu. In the Import dialog, expand the CIMTool folder and select Import Schema and click the \"Finish\" button.</p> <p></p> <p>Browse to find the <code>.xmi</code>, <code>.eap</code> or <code>.eapx</code> file then select the checkboxes next to the project(s) you want to import the schema file into. </p> <p>Next specify the namespace to be associated with your imported CIM schema. The set of radio buttons provide the default namespaces for the most recent release of the CIM. The \"Preference*\" radio button option gives a generic namespace which commonly is edited as needed. If importing an <code>.xmi</code> file containing your own custom extension packages you should provide a unique namespace to associate with this \"extensions schema\". For more information on extensions visit the topic CIMTool Support for Extension Namespaces. </p> <p>Finally, if loading changes over an existing schema with the same name be sure to select the \"Replace existig schema\" checkbox.</p> <p></p> <p>Once imported the CIM UML will be stored in the Schema folder of the project.</p>"},{"location":"how-to/import-cim-uml/#cimtool-profiling-tutorial","title":"CIMTool Profiling Tutorial","text":"<p>For further details on how to use CIMTool to create and edit profiles based on the CIM visit the How To section of https://cimtool.ucaiug.io/.</p>"},{"location":"how-to/namespaces-in-cimtool/","title":"Namespaces in CIMTool","text":"<p>See also: CIMTool Support for Extension Namespaces</p>"},{"location":"how-to/namespaces-in-cimtool/#background","title":"Background","text":"<p>In CIM/XML, each name, such as ACLineSegment, is qualified by a namespace, such as <code>http://cim.ucaiug.io/CIM-schema-cim16#</code>. The combination forms a globally unique term. By convention, only the authority designated by the namespace URI would define a term beginning with <code>http://cim.ucaiug.io/CIM-schema-cim16#...</code></p> <p>The same applies in XML schema's derived from the CIM. An XML schema has a target namespace, declared in its header, that qualifies names defined in the body of the schema.</p> <p>In practical applications of the CIM it is combined with project and vendor-specific extensions. Each of these may have an independent author. Separate namespaces are used to prevent name conflicts between them.</p>"},{"location":"how-to/namespaces-in-cimtool/#version-control-and-namespaces","title":"Version Control and Namespaces","text":"<p>Namespaces prevent name conflicts between authors of terms. They are also used to prevent conflicts between different versions of a term's definition. For example, <code>http://cim.ucaiug.io/CIM-schema-cim17##ACLineSegment</code> might be succeeded by <code>http://cim.ucaiug.io/CIM-schema-cim18##ACLineSegment</code> with a slightly different definition.</p> <p>Both versions of the term might be in use at the same time. The potential conflict can be detected because the different versions have different namespaces. Resolving a version conflict is another matter, however.</p>"},{"location":"how-to/namespaces-in-cimtool/#the-meaning-of-a-namespace","title":"The Meaning of a Namespace","text":"<p>Namespaces don't carry much information in themselves. If the namespace is an HTTP URI (http://authority/...) then the identity of the issuing authority can be found via the whois service.</p> <p>But there is no inheritance among namespaces, nor is http:/x/y/ a superset of http://x/y/z/. You can't necessarily obtain a document from a namespace via HTTP protocol either.</p> <p>In the end, a namespace is just an identifier whose allocation is controlled by the IANA and its delegates.</p>"},{"location":"how-to/namespaces-in-cimtool/#profiles-and-namespaces","title":"Profiles and Namespaces","text":"<p>A profile is a subset of an information model defined such that:</p> <p>An instance that conforms to the profile also conforms to the general information model.<sup>1</sup> </p> <p>The classes and properties in a profile are subsets, or restrictions, of those in the information model.</p> <p>What namespace should be used for the terms in a profile? There are two schools of thought.</p>"},{"location":"how-to/namespaces-in-cimtool/#separate-profile-namespaces","title":"Separate Profile Namespaces","text":"<p>The argument here is that profile classes and properties are distinct from the general classes and properties they derive from. Therefore they require distinct terms.</p> <p>We need a separate namespace and separate terms so we can define restrictions for the profile without affecting the general information model definitions. This also allows us to specify a specific profile to which an instance should conform.</p>"},{"location":"how-to/namespaces-in-cimtool/#same-namespaces-for-profile-and-information-model","title":"Same Namespaces for Profile and Information Model","text":"<p>The argument here is that the profile definitions are consistent (see footnote) with those of the general information model. Therefore they can use the same terms. The restricted class ACLineSegment can have the same namespace as the general class ACLineSegment.</p> <p>An advantage of this is that the origin of any term in the profile is immediately obvious. Its namespace indicates the author (IEC, Vendor etc). There is no need to correlate terms via the profile definition. The same term is used everywhere.</p>"},{"location":"how-to/namespaces-in-cimtool/#a-philosophical-objection","title":"A Philosophical Objection","text":"<p>A profile will be consistent with the information model, but different profiles are not necessarily consistent with each other. The same term can denote a different definition in each profile. The terms are not globally distinct despite the use of namespaces. That breaks one of the architectural precepts we adopted at the outset.</p>"},{"location":"how-to/namespaces-in-cimtool/#practical-objections","title":"Practical Objections","text":"<p>In practical terms, the 'same namespace' approach creates a number of problems:</p> <p>Since we can't distinguish profiles by namespace, there is no commonly understood way to associate instances with them. This becomes a matter for per-project and per-vendor conventions.</p> <p>Similarly, there is no obvious way to version profiles separately from the general information model. The current practice is to indicate versions via the namespace. It would be usual for profiles to undergo more than one formal release in the lifetime of the system. However, the CIM version would typically be frozen, or updated on a different timetable.</p> <p>The 'same namespace' approach is unworkable with XML schema's. Normal practice is to give each XML schema its own target namespace. To do otherwise confuses standard tools and makes it impossible to write a WSDL definitions involving more than one profile schema.</p> <ol> <li> <p>consistent:  Technically, consistent means that, when all the definitions are asserted at once, there is a non-empty set of instances that conform with them. That is true for profile and general information model definitions.\u00a0\u21a9</p> </li> </ol>"},{"location":"how-to/navigate-workspace/","title":"Navigate the Workspace","text":"<p>After creating or opening a project. Click on the arrow to the left of the project name in the Project Explorer to expand it. </p> <p></p> <p>Notice that the project has the 4 folders:</p> <ul> <li>Incremental: Contains CIM XML incremental files in RDF format (<code>.xml</code>)</li> <li>Instances: Contains CIM XML instance files in RDF format (<code>.xml</code>)</li> <li>Profiles: Contains Contextual Profile definitions</li> <li>Schema: Contains the imported CIM UML (<code>.xmi</code>)</li> </ul> <p>In the Profiles folder, you can find Contextual Profile definitions stored in Web Ontology Language (OWL) (<code>.owl</code>) and RDF Schema (<code>.xml</code>) format. As well as log files (<code>.log</code>), which help identify errors. Depending upon your usage of CIMTool, there may also be HTML, JSON Schema, or XSD files in this folder.</p> <p>Tip</p> <p>Folders and files that have errors will have a red 'X' on their associated icon</p> <p>Each CIMTool project has a named folder in your workspace directory on your computer's file system. This directory will have the same four sub-folders.</p> <p>Warning</p> <p>It recommended to not add, modify or delete anything inside a workspace directory manually or with tools other than CIMTool to prevent corrupting your project.</p>"},{"location":"how-to/obtain-cim-models/","title":"Obtain Stable Releases of the CIM","text":"<p>One of the first questions often asked is: \"Where do I download releases of the CIM UML model for use with Sparx Enterprise Architect?\" </p>"},{"location":"how-to/obtain-cim-models/#obtain-the-cim-uml","title":"Obtain the CIM UML","text":"<p>UCAIug Task Force 13 (TF13), UCAIug Task Force 14 (TF14), and UCAIug Task Force 16 (TF16) are groups that work to advance the CIM and who publish periodic releases of the CIM UML. These releases are published to the UCAIug (CIM Users Group) website in Enterprise Architect project file (<code>.eap</code> or <code>.eapx</code>) format.</p> <p>Both past and current stables releases of these CIM EA project files are made publicly available for download from the UCAIug. Current releases can be found at Current CIM Model Drafts and this page should look similar to the next screenshot. Older releases are available at Past CIM Model Releases.</p> <p></p> <p>Note</p> <p>Some content on the UCAIug site may be restricted to registered users. To access previous versions of the CIM UML you must be a CIM Users Group member. Use the CIM Users Group join form to register and create an account. Note that there are both paid and free levels of membership.</p> <p>Note that interim non-published releases of the CIM that reflect \"work in progress\" by the aforementioned Task Forces are generally not publically available  for non-participants. If you are interested in becoming an active member please reach out via the UCA CIM User's Group webite.</p>"},{"location":"how-to/profile-maintenance/","title":"Profile Maintenance","text":"<p>A profile can lose synchronism with the CIM. Each profile applies to a specific version of the CIM, but the life cycle of each profile and the CIM are independent of each other.</p> <p>For example, a change in the CIM might leave a profile with a reference to a non-existent class. More subtle mismatches are also possible. An attribute could be replaced with an association, or the cardinality of an association changed leaving the profile inconsistent with with respect to the CIM.</p> <p>CIMTool provides several features that help you to maintain a profile in the face of changes in the CIM.</p> <p>You can compare two versions of the CIM and view the differences. You can compare two profiles and view their differences. You can analyse a profile against a specific version of the CIM and find inconsistencies. You can view suggested corrections and apply them to the profile.</p> <p>See Comparing Profiles and Schemas for details of the comparison functions.</p>"},{"location":"how-to/profile-maintenance/#automatic-profile-analysis","title":"Automatic Profile Analysis","text":"<p>Profile analysis and correction is performed by a combination of the build system and the Repair Editor.</p> <p>Profile analysis is automatically performed by the eclipse build system each time a changed profile is saved or a new schema is imported. (You should ensure that automatic builds are switched on under the Project menu.) If inconsistencies are found, a .repair file is created in the project with the same name as the profile. The repair file is seen in the Project Explorer View with a red icon. In addition, a problem marker is attached to the profile.</p>"},{"location":"how-to/profile-maintenance/#profile-repair-editor","title":"Profile Repair Editor","text":"<p>Open the repair file in the Repair Editor (which is the default for this file type). From the Project Explorer View double click the file. The outline view shows each element in the profile that has inconsistencies. The problems and the suggested corrections are grouped under each element. Selecting an item in the outline causes the main window of the repair editor to show its full details.</p> <p></p> <ul> <li>To effect a correction, check the displayed suggestion. Once all desired corrections have been checked, click the save button.</li> <li>When the repair editor is saved, the checked corrections are applied to the profile and it is re-analysed. If all inconsistencies have been resolved by the corrections, the repair file and the problem marker are removed.</li> <li>Otherwise the repair file is updated to show remaining problems and any new problems revealed after the corrections were applied.</li> </ul>"},{"location":"how-to/profile-maintenance/#namespace-mismatches","title":"Namespace Mismatches","text":"<p>Namespace mismatches between the profile and the schema are the most common source of inconsistencies. It can be tedious to correct these, even using the repair editor.</p> <p>For that reason a separate wizard, Reorganise and Repair wizard is provided for performing bulk updates to a profile. This is accessed from the Summary Page in the Profile Editor.</p>"},{"location":"how-to/search-schemas-profiles/","title":"Searching Schemas and Profiles","text":"<p>Often, the best way to find a definition in the CIM UML or a Contextual Profile is to use CIMTool's search wizard. The search button looks like this  for schema or this  for profiles and appears above the view. Click one of these to display the search wizard.</p> <p>The search wizard accepts a string and displays matches. Here is an example where we search for zero-sequence reactance properties:</p> <p></p> <p>To begin, enter the first few letters of the search term in the top box. If several terms match this prefix you select one in the second box. The third box then shows all classes and properties from the profile with this name.</p> <p>In the example above four x0 properties are found and each is displayed with the name of its class.</p> <p>To jump to the definition, select the class or profile and click the Finish button. This will focus the profile editor and profile outline on the chosen definition. The Project Model View and Documentation View will also update to show the corresponding schema (i.e. CIM) definition.</p>"},{"location":"how-to/search-schemas-profiles/#search-the-cim-uml","title":"Search the CIM UML","text":"<p>To search the schema (i.e. the CIM UML) use the search button on the Project Model View. Switching to the CIMTool Browsing perspective may also be helpful.</p> <p>The scope of a schema search includes packages, datatypes and enumeration values as well as classes and properties. For example, Contingency is the name of a package, a class and a property in the CIM as seen here:</p> <p></p> <p>In this example, the terms in brackets next to each match are the containing package for the first two hits and the containing class for the last hit (the property).</p> <p>The effect of clicking the Finish button is to highlight the result in the Profile Model View and the Documentation View.</p>"},{"location":"how-to/search-schemas-profiles/#adding-search-results-to-a-profile","title":"Adding Search Results to a Profile","text":"<p>Schema search is also available within the profile editor to assist in adding classes to the profile. The search button appears on the Add/Remove page when the profile element (top item) in the outline is selected.</p> <p></p> <p>The effect of clicking Finish is to highlight the selected class or package so it can be immediately added to the profile. If a property is selected, then its containing class is highlighted for addition.</p> <p>The result is also highlighted in the Profile Model View and the Documentation View.</p> <p>Warning</p> <p>Occasionally, the search wizard will find a term or an item that can't be shown in the associated view or editor. In its default mode, the Add/Remove page does not show schema classes if they have already been added to the profile. Searching for one of these will result in its containing package being highlighted.</p>"}]}